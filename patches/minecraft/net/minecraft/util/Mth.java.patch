--- a/net/minecraft/util/Mth.java
+++ b/net/minecraft/util/Mth.java
@@ -69,6 +_,10 @@
       return Math.abs(p_14155_);
    }
 
+   public static long abs(long p_14041_) {
+      return Math.abs(p_14041_);
+   }
+
    public static int m_14040_(int p_14041_) {
       return Math.abs(p_14041_);
    }
@@ -83,10 +_,19 @@
       return p_14166_ > (double)i ? i + 1 : i;
    }
 
+   public static long lceil(double p_14166_) {
+      long i = (long)p_14166_;
+      return p_14166_ > (double)i ? i + 1 : i;
+   }
+
    public static int m_14045_(int p_14046_, int p_14047_, int p_14048_) {
       return Math.min(Math.max(p_14046_, p_14047_), p_14048_);
    }
 
+   public static long clamp(long p_14046_, long p_14047_, long p_14048_) {
+      return Math.min(Math.max(p_14046_, p_14047_), p_14048_);
+   }
+
    public static float m_14036_(float p_14037_, float p_14038_, float p_14039_) {
       return p_14037_ < p_14038_ ? p_14038_ : Math.min(p_14037_, p_14039_);
    }
@@ -123,10 +_,18 @@
       return Math.max(p_14006_, p_14007_);
    }
 
+   public static long longFloorDiv(long p_14043_, long p_14044_) {
+      return Math.floorDiv(p_14043_, p_14044_);
+   }
+
    public static int m_14042_(int p_14043_, int p_14044_) {
       return Math.floorDiv(p_14043_, p_14044_);
    }
 
+   public static long nextLong(RandomSource p_216272_, long p_216273_, long p_216274_) {
+      return p_216273_ >= p_216274_ ? p_216273_ : p_216272_.nextLong(p_216274_ - p_216273_ + 1) + p_216273_;
+   }
+
    public static int m_216271_(RandomSource p_216272_, int p_216273_, int p_216274_) {
       return p_216273_ >= p_216274_ ? p_216273_ : p_216272_.m_188503_(p_216274_ - p_216273_ + 1) + p_216273_;
    }
@@ -151,6 +_,10 @@
       return Math.floorMod(p_14101_, p_14102_);
    }
 
+   public static long positiveModulo(long p_14101_, long p_14102_) {
+      return Math.floorMod(p_14101_, p_14102_);
+   }
+
    public static float m_14091_(float p_14092_, float p_14093_) {
       return (p_14092_ % p_14093_ + p_14093_) % p_14093_;
    }
@@ -240,17 +_,32 @@
       return i + 1;
    }
 
-   public static boolean m_14152_(int p_14153_) {
+   public static long smallestEncompassingPowerOfTwo(long p_14126_) {
+      long i = p_14126_ - 1;
+      i |= i >> 1;
+      i |= i >> 2;
+      i |= i >> 4;
+      i |= i >> 8;
+      i |= i >> 16;
+      return i + 1;
+   }
+
+   public static boolean isPowerOfTwo(long p_14153_) {
       return p_14153_ != 0 && (p_14153_ & p_14153_ - 1) == 0;
    }
 
    public static int m_14163_(int p_14164_) {
-      p_14164_ = m_14152_(p_14164_) ? p_14164_ : m_14125_(p_14164_);
+      p_14164_ = isPowerOfTwo(p_14164_) ? p_14164_ : m_14125_(p_14164_);
+      return f_13997_[(int)((long)p_14164_ * 125613361L >> 27) & 31];
+   }
+
+   public static long ceillog2(long p_14164_) {
+      p_14164_ = isPowerOfTwo(p_14164_) ? p_14164_ : smallestEncompassingPowerOfTwo(p_14164_);
       return f_13997_[(int)((long)p_14164_ * 125613361L >> 27) & 31];
    }
 
    public static int m_14173_(int p_14174_) {
-      return m_14163_(p_14174_) - (m_14152_(p_14174_) ? 0 : 1);
+      return m_14163_(p_14174_) - (isPowerOfTwo(p_14174_) ? 0 : 1);
    }
 
    public static int m_14159_(float p_14160_, float p_14161_, float p_14162_) {
@@ -267,13 +_,13 @@
 
    /** @deprecated */
    @Deprecated
-   public static long m_14057_(Vec3i p_14058_) {
-      return m_14130_(p_14058_.m_123341_(), p_14058_.m_123342_(), p_14058_.m_123343_());
+   public static long getSeed(me.alphamode.mclong.core.Vec3l p_14058_) {
+      return getSeed(p_14058_.getX(), p_14058_.getY(), p_14058_.getZ());
    }
 
    /** @deprecated */
    @Deprecated
-   public static long m_14130_(int p_14131_, int p_14132_, int p_14133_) {
+   public static long getSeed(long p_14131_, long p_14132_, long p_14133_) {
       long i = (long)(p_14131_ * 3129871) ^ (long)p_14133_ * 116129781L ^ (long)p_14132_;
       i = i * i * 42317861L + i * 11L;
       return i >> 16;
@@ -523,6 +_,14 @@
       }
    }
 
+   public static long lsign(double p_14206_) {
+      if (p_14206_ == 0.0D) {
+         return 0;
+      } else {
+         return p_14206_ > 0.0D ? 1 : -1;
+      }
+   }
+
    public static float m_14189_(float p_14190_, float p_14191_, float p_14192_) {
       return p_14191_ + p_14190_ * m_14177_(p_14192_ - p_14191_);
    }
@@ -579,6 +_,10 @@
       return p_216288_.m_188503_(p_216290_ - p_216289_ + 1) + p_216289_;
    }
 
+   public static long randomBetweenInclusive(RandomSource p_216288_, long p_216289_, long p_216290_) {
+      return p_216288_.nextLong(p_216290_ - p_216289_ + 1) + p_216289_;
+   }
+
    public static float m_216283_(RandomSource p_216284_, float p_216285_, float p_216286_) {
       return p_216284_.m_188501_() * (p_216286_ - p_216285_) + p_216285_;
    }
@@ -607,32 +_,32 @@
       return m_14107_(p_184629_ / (double)p_184630_) * p_184630_;
    }
 
-   public static IntStream m_216295_(int p_216296_, int p_216297_, int p_216298_) {
-      return m_216250_(p_216296_, p_216297_, p_216298_, 1);
+   public static java.util.stream.LongStream outFromOrigin(long p_216296_, long p_216297_, long p_216298_) {
+      return outFromOrigin(p_216296_, p_216297_, p_216298_, 1);
    }
 
-   public static IntStream m_216250_(int p_216251_, int p_216252_, int p_216253_, int p_216254_) {
+   public static java.util.stream.LongStream outFromOrigin(long p_216251_, long p_216252_, long p_216253_, long p_216254_) {
       if (p_216252_ > p_216253_) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "upperbound %d expected to be > lowerBound %d", p_216253_, p_216252_));
       } else if (p_216254_ < 1) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "steps expected to be >= 1, was %d", p_216254_));
       } else {
-         return p_216251_ >= p_216252_ && p_216251_ <= p_216253_ ? IntStream.iterate(p_216251_, (p_216282_) -> {
-            int i = Math.abs(p_216251_ - p_216282_);
+         return p_216251_ >= p_216252_ && p_216251_ <= p_216253_ ? java.util.stream.LongStream.iterate(p_216251_, (p_216282_) -> {
+            long i = Math.abs(p_216251_ - p_216282_);
             return p_216251_ - i >= p_216252_ || p_216251_ + i <= p_216253_;
          }, (p_216260_) -> {
             boolean flag = p_216260_ <= p_216251_;
-            int i = Math.abs(p_216251_ - p_216260_);
+            long i = Math.abs(p_216251_ - p_216260_);
             boolean flag1 = p_216251_ + i + p_216254_ <= p_216253_;
             if (!flag || !flag1) {
-               int j = p_216251_ - i - (flag ? p_216254_ : 0);
+               long j = p_216251_ - i - (flag ? p_216254_ : 0);
                if (j >= p_216252_) {
                   return j;
                }
             }
 
             return p_216251_ + i + p_216254_;
-         }) : IntStream.empty();
+         }) : java.util.stream.LongStream.empty();
       }
    }
 
