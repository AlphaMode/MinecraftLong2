--- a/net/minecraft/util/Mth.java
+++ b/net/minecraft/util/Mth.java
@@ -65,10 +_,23 @@
       return p_14135_ < (double)i ? i - 1L : i;
    }
 
+   public static me.alphamode.mclong.math.BigInteger lfloor(me.alphamode.mclong.math.BigDecimal val) {
+      me.alphamode.mclong.math.BigInteger i = val.toBigInteger();
+      return val.compareTo(i.toBigDecimal()) < 0 ? i.subtract() : i;
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal lfloorD(me.alphamode.mclong.math.BigDecimal val) {
+      return val.setScale(0, java.math.RoundingMode.FLOOR);
+   }
+
    public static float m_14154_(float p_14155_) {
       return Math.abs(p_14155_);
    }
 
+   public static long abs(long pValue) {
+      return Math.abs(pValue);
+   }
+
    public static int m_14040_(int p_14041_) {
       return Math.abs(p_14041_);
    }
@@ -83,10 +_,27 @@
       return p_14166_ > (double)i ? i + 1 : i;
    }
 
+   public static long lceil(double pValue) {
+      long i = (long)pValue;
+      return pValue > (double)i ? i + 1 : i;
+   }
+
+   public static me.alphamode.mclong.math.BigInteger lceil(me.alphamode.mclong.math.BigDecimal val) {
+      return val.setScale(0, java.math.RoundingMode.CEILING).toBigInteger();
+   }
+
    public static int m_14045_(int p_14046_, int p_14047_, int p_14048_) {
       return Math.min(Math.max(p_14046_, p_14047_), p_14048_);
    }
 
+   public static long clamp(long pValue, long pMin, long pMax) {
+      return Math.min(Math.max(pValue, pMin), pMax);
+   }
+
+   public static me.alphamode.mclong.math.BigInteger clamp(me.alphamode.mclong.math.BigInteger pValue, me.alphamode.mclong.math.BigInteger pMin, me.alphamode.mclong.math.BigInteger pMax) {
+      return pValue.max(pMin).min(pMax);
+   }
+
    public static float m_14036_(float p_14037_, float p_14038_, float p_14039_) {
       return p_14037_ < p_14038_ ? p_14038_ : Math.min(p_14037_, p_14039_);
    }
@@ -95,6 +_,18 @@
       return p_14009_ < p_14010_ ? p_14010_ : Math.min(p_14009_, p_14011_);
    }
 
+   public static me.alphamode.mclong.math.BigDecimal clamp(me.alphamode.mclong.math.BigDecimal pValue, me.alphamode.mclong.math.BigDecimal pMin, me.alphamode.mclong.math.BigDecimal pMax) {
+      return pValue.compareTo(pMin) < 0 ? pMin : pValue.min(pMax);
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal clampedLerp(me.alphamode.mclong.math.BigDecimal pStart, me.alphamode.mclong.math.BigDecimal pEnd, me.alphamode.mclong.math.BigDecimal pDelta) {
+      if (pDelta.compareTo(me.alphamode.mclong.math.BigDecimal.ZERO) < 0) {
+         return pStart;
+      } else {
+         return pDelta.compareTo(me.alphamode.mclong.math.BigDecimal.ONE) > 0 ? pEnd : lerp(pDelta, pStart, pEnd);
+      }
+   }
+
    public static double m_14085_(double p_14086_, double p_14087_, double p_14088_) {
       if (p_14088_ < 0.0D) {
          return p_14086_;
@@ -123,10 +_,26 @@
       return Math.max(p_14006_, p_14007_);
    }
 
+   public static long longFloorDiv(long pDividend, long pDivisor) {
+      return Math.floorDiv(pDividend, pDivisor);
+   }
+
+   public static me.alphamode.mclong.math.BigInteger floorDiv(me.alphamode.mclong.math.BigInteger pDividend, me.alphamode.mclong.math.BigInteger pDivisor) {
+      return me.alphamode.mclong.math.BigMath.floorDiv(pDividend, pDivisor);
+   }
+
+   public static me.alphamode.mclong.math.BigInteger floorDiv(me.alphamode.mclong.math.BigInteger pDividend, long pDivisor) {
+      return me.alphamode.mclong.math.BigMath.floorDiv(pDividend, pDivisor);
+   }
+
    public static int m_14042_(int p_14043_, int p_14044_) {
       return Math.floorDiv(p_14043_, p_14044_);
    }
 
+   public static long nextLong(RandomSource pRandom, long pMinimum, long pMaximum) {
+      return pMinimum >= pMaximum ? pMinimum : pRandom.nextLong(pMaximum - pMinimum + 1) + pMinimum;
+   }
+
    public static int m_216271_(RandomSource p_216272_, int p_216273_, int p_216274_) {
       return p_216273_ >= p_216274_ ? p_216273_ : p_216272_.m_188503_(p_216274_ - p_216273_ + 1) + p_216273_;
    }
@@ -139,6 +_,10 @@
       return p_216265_ >= p_216266_ ? p_216265_ : p_216264_.m_188500_() * (p_216266_ - p_216265_) + p_216265_;
    }
 
+   public static me.alphamode.mclong.math.BigDecimal nextDouble(RandomSource pRandom, me.alphamode.mclong.math.BigDecimal pMinimum, me.alphamode.mclong.math.BigDecimal pMaximum) {
+      return pMinimum.compareTo(pMaximum) >= 0 ? pMinimum : me.alphamode.mclong.math.BigDecimal.valueOf(pRandom.m_188500_()).multiply((pMaximum.subtract(pMinimum))).add(pMinimum);
+   }
+
    public static boolean m_14033_(float p_14034_, float p_14035_) {
       return Math.abs(p_14035_ - p_14034_) < 1.0E-5F;
    }
@@ -147,10 +_,22 @@
       return Math.abs(p_14084_ - p_14083_) < (double)1.0E-5F;
    }
 
+   public static boolean equal(me.alphamode.mclong.math.BigDecimal a, me.alphamode.mclong.math.BigDecimal b) {
+      return b.subtract(a).abs().compareTo(me.alphamode.mclong.core.BigConstants.EPSILON_EQUAL) < 0;
+   }
+
    public static int m_14100_(int p_14101_, int p_14102_) {
       return Math.floorMod(p_14101_, p_14102_);
    }
 
+   public static long positiveModulo(long pX, long pY) {
+      return Math.floorMod(pX, pY);
+   }
+
+   public static me.alphamode.mclong.math.BigInteger positiveModulo(me.alphamode.mclong.math.BigInteger pX, long pY) {
+      return me.alphamode.mclong.math.BigMath.floorMod(pX, pY);
+   }
+
    public static float m_14091_(float p_14092_, float p_14093_) {
       return (p_14092_ % p_14093_ + p_14093_) % p_14093_;
    }
@@ -240,17 +_,32 @@
       return i + 1;
    }
 
-   public static boolean m_14152_(int p_14153_) {
-      return p_14153_ != 0 && (p_14153_ & p_14153_ - 1) == 0;
+   public static long smallestEncompassingPowerOfTwo(long pValue) {
+      long i = pValue - 1;
+      i |= i >> 1;
+      i |= i >> 2;
+      i |= i >> 4;
+      i |= i >> 8;
+      i |= i >> 16;
+      return i + 1;
+   }
+
+   public static boolean isPowerOfTwo(long pValue) {
+      return pValue != 0 && (pValue & pValue - 1) == 0;
    }
 
    public static int m_14163_(int p_14164_) {
-      p_14164_ = m_14152_(p_14164_) ? p_14164_ : m_14125_(p_14164_);
+      p_14164_ = isPowerOfTwo(p_14164_) ? p_14164_ : m_14125_(p_14164_);
       return f_13997_[(int)((long)p_14164_ * 125613361L >> 27) & 31];
    }
 
+   public static long ceillog2(long pValue) {
+      pValue = isPowerOfTwo(pValue) ? pValue : smallestEncompassingPowerOfTwo(pValue);
+      return f_13997_[(int)((long)pValue * 125613361L >> 27) & 31];
+   }
+
    public static int m_14173_(int p_14174_) {
-      return m_14163_(p_14174_) - (m_14152_(p_14174_) ? 0 : 1);
+      return m_14163_(p_14174_) - (isPowerOfTwo(p_14174_) ? 0 : 1);
    }
 
    public static int m_14159_(float p_14160_, float p_14161_, float p_14162_) {
@@ -265,16 +_,20 @@
       return p_14186_ - (double)m_14134_(p_14186_);
    }
 
-   /** @deprecated */
-   @Deprecated
-   public static long m_14057_(Vec3i p_14058_) {
-      return m_14130_(p_14058_.m_123341_(), p_14058_.m_123342_(), p_14058_.m_123343_());
-   }
-
-   /** @deprecated */
-   @Deprecated
-   public static long m_14130_(int p_14131_, int p_14132_, int p_14133_) {
-      long i = (long)(p_14131_ * 3129871) ^ (long)p_14133_ * 116129781L ^ (long)p_14132_;
+   public static me.alphamode.mclong.math.BigDecimal frac(me.alphamode.mclong.math.BigDecimal pNumber) {
+      return pNumber.subtract(lfloor(pNumber).toBigDecimal());
+   }
+
+   /** @deprecated */
+   @Deprecated
+   public static long getSeed(me.alphamode.mclong.core.Vec3l pPos) {
+      return getSeed(pPos.getX(), pPos.getY(), pPos.getZ());
+   }
+
+   /** @deprecated */
+   @Deprecated
+   public static long getSeed(long pX, long pY, long pZ) {
+      long i = (long)(pX * 3129871) ^ (long)pZ * 116129781L ^ (long)pY;
       i = i * i * 42317861L + i * 11L;
       return i >> 16;
    }
@@ -289,6 +_,10 @@
       return m_216261_(f_13996_);
    }
 
+   public static me.alphamode.mclong.math.BigDecimal inverseLerp(me.alphamode.mclong.math.BigDecimal pDelta, me.alphamode.mclong.math.BigDecimal pStart, me.alphamode.mclong.math.BigDecimal pEnd) {
+      return (pDelta.subtract(pStart)).divide((pEnd.subtract(pStart)));
+   }
+
    public static double m_14112_(double p_14113_, double p_14114_, double p_14115_) {
       return (p_14113_ - p_14114_) / (p_14115_ - p_14114_);
    }
@@ -298,36 +_,36 @@
    }
 
    public static boolean m_144888_(Vec3 p_144889_, Vec3 p_144890_, AABB p_144891_) {
-      double d0 = (p_144891_.f_82288_ + p_144891_.f_82291_) * 0.5D;
-      double d1 = (p_144891_.f_82291_ - p_144891_.f_82288_) * 0.5D;
-      double d2 = p_144889_.f_82479_ - d0;
-      if (Math.abs(d2) > d1 && d2 * p_144890_.f_82479_ >= 0.0D) {
+      double d0 = (p_144891_.f_82288_.doubleValue() + p_144891_.f_82291_.doubleValue()) * 0.5D;
+      double d1 = (p_144891_.f_82291_.doubleValue() - p_144891_.f_82288_.doubleValue()) * 0.5D;
+      double d2 = p_144889_.m_7096_() - d0;
+      if (Math.abs(d2) > d1 && d2 * p_144890_.m_7096_() >= 0.0D) {
          return false;
       } else {
-         double d3 = (p_144891_.f_82289_ + p_144891_.f_82292_) * 0.5D;
-         double d4 = (p_144891_.f_82292_ - p_144891_.f_82289_) * 0.5D;
-         double d5 = p_144889_.f_82480_ - d3;
-         if (Math.abs(d5) > d4 && d5 * p_144890_.f_82480_ >= 0.0D) {
+         double d3 = (p_144891_.f_82289_.doubleValue() + p_144891_.f_82292_.doubleValue()) * 0.5D;
+         double d4 = (p_144891_.f_82292_.doubleValue() - p_144891_.f_82289_.doubleValue()) * 0.5D;
+         double d5 = p_144889_.m_7098_() - d3;
+         if (Math.abs(d5) > d4 && d5 * p_144890_.m_7098_() >= 0.0D) {
             return false;
          } else {
-            double d6 = (p_144891_.f_82290_ + p_144891_.f_82293_) * 0.5D;
-            double d7 = (p_144891_.f_82293_ - p_144891_.f_82290_) * 0.5D;
-            double d8 = p_144889_.f_82481_ - d6;
-            if (Math.abs(d8) > d7 && d8 * p_144890_.f_82481_ >= 0.0D) {
+            double d6 = (p_144891_.f_82290_.doubleValue() + p_144891_.f_82293_.doubleValue()) * 0.5D;
+            double d7 = (p_144891_.f_82293_.doubleValue() - p_144891_.f_82290_.doubleValue()) * 0.5D;
+            double d8 = p_144889_.m_7094_() - d6;
+            if (Math.abs(d8) > d7 && d8 * p_144890_.m_7094_() >= 0.0D) {
                return false;
             } else {
-               double d9 = Math.abs(p_144890_.f_82479_);
-               double d10 = Math.abs(p_144890_.f_82480_);
-               double d11 = Math.abs(p_144890_.f_82481_);
-               double d12 = p_144890_.f_82480_ * d8 - p_144890_.f_82481_ * d5;
+               double d9 = Math.abs(p_144890_.m_7096_());
+               double d10 = Math.abs(p_144890_.m_7098_());
+               double d11 = Math.abs(p_144890_.m_7094_());
+               double d12 = p_144890_.m_7098_() * d8 - p_144890_.m_7094_() * d5;
                if (Math.abs(d12) > d4 * d11 + d7 * d10) {
                   return false;
                } else {
-                  d12 = p_144890_.f_82481_ * d2 - p_144890_.f_82479_ * d8;
+                  d12 = p_144890_.m_7094_() * d2 - p_144890_.m_7096_() * d8;
                   if (Math.abs(d12) > d1 * d11 + d7 * d9) {
                      return false;
                   } else {
-                     d12 = p_144890_.f_82479_ * d5 - p_144890_.f_82480_ * d2;
+                     d12 = p_144890_.m_7096_() * d5 - p_144890_.m_7098_() * d2;
                      return Math.abs(d12) < d1 * d10 + d4 * d9;
                   }
                }
@@ -495,6 +_,22 @@
       return p_14141_ + p_14140_ * (p_14142_ - p_14141_);
    }
 
+   public static me.alphamode.mclong.math.BigDecimal lerp(me.alphamode.mclong.math.BigDecimal pDelta, me.alphamode.mclong.math.BigDecimal pStart, me.alphamode.mclong.math.BigDecimal pEnd) {
+      return pStart.add(pDelta.multiply(pEnd.subtract(pStart)));
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal lerp(double pDelta, me.alphamode.mclong.math.BigDecimal pStart, me.alphamode.mclong.math.BigDecimal pEnd) {
+      return pStart.add(me.alphamode.mclong.math.BigDecimal.valueOf(pDelta).multiply(pEnd.subtract(pStart)));
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal lerp2(me.alphamode.mclong.math.BigDecimal pDelta1, me.alphamode.mclong.math.BigDecimal pDelta2, me.alphamode.mclong.math.BigDecimal pStart1, me.alphamode.mclong.math.BigDecimal pEnd1, me.alphamode.mclong.math.BigDecimal pStart2, me.alphamode.mclong.math.BigDecimal pEnd2) {
+      return lerp(pDelta2, lerp(pDelta1, pStart1, pEnd1), lerp(pDelta1, pStart2, pEnd2));
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal lerp3(me.alphamode.mclong.math.BigDecimal pDelta1, me.alphamode.mclong.math.BigDecimal pDelta2, me.alphamode.mclong.math.BigDecimal pDelta3, me.alphamode.mclong.math.BigDecimal pStart1, me.alphamode.mclong.math.BigDecimal pEnd1, me.alphamode.mclong.math.BigDecimal pStart2, me.alphamode.mclong.math.BigDecimal pEnd2, me.alphamode.mclong.math.BigDecimal pStart3, me.alphamode.mclong.math.BigDecimal pEnd3, me.alphamode.mclong.math.BigDecimal pStart4, me.alphamode.mclong.math.BigDecimal pEnd4) {
+      return lerp(pDelta3, lerp2(pDelta1, pDelta2, pStart1, pEnd1, pStart2, pEnd2), lerp2(pDelta1, pDelta2, pStart3, pEnd3, pStart4, pEnd4));
+   }
+
    public static double m_14012_(double p_14013_, double p_14014_, double p_14015_, double p_14016_, double p_14017_, double p_14018_) {
       return m_14139_(p_14014_, m_14139_(p_14013_, p_14015_, p_14016_), m_14139_(p_14013_, p_14017_, p_14018_));
    }
@@ -511,6 +_,10 @@
       return p_14198_ * p_14198_ * p_14198_ * (p_14198_ * (p_14198_ * 6.0D - 15.0D) + 10.0D);
    }
 
+   public static me.alphamode.mclong.math.BigDecimal smoothstep(me.alphamode.mclong.math.BigDecimal pInput) {
+      return pInput.multiply(pInput).multiply(pInput).multiply((pInput.multiply((pInput.multiply(me.alphamode.mclong.core.BigConstants.SIX).subtract(me.alphamode.mclong.core.BigConstants.FIFTEEN))).add(me.alphamode.mclong.core.BigConstants.TEN)));
+   }
+
    public static double m_144946_(double p_144947_) {
       return 30.0D * p_144947_ * p_144947_ * (p_144947_ - 1.0D) * (p_144947_ - 1.0D);
    }
@@ -523,6 +_,14 @@
       }
    }
 
+   public static int sign(me.alphamode.mclong.math.BigDecimal val) {
+      if (val.equals(me.alphamode.mclong.math.BigDecimal.ZERO) | val.equals(me.alphamode.mclong.math.BigDecimal.REAL_ZERO)) {
+         return 0;
+      } else {
+         return val.compareTo(me.alphamode.mclong.math.BigDecimal.ZERO) > 0 ? 1 : -1;
+      }
+   }
+
    public static float m_14189_(float p_14190_, float p_14191_, float p_14192_) {
       return p_14191_ + p_14190_ * m_14177_(p_14192_ - p_14191_);
    }
@@ -539,6 +_,10 @@
       return p_144953_ * p_144953_;
    }
 
+   public static me.alphamode.mclong.math.BigDecimal square(me.alphamode.mclong.math.BigDecimal pValue) {
+      return pValue.multiply(pValue);
+   }
+
    public static int m_144944_(int p_144945_) {
       return p_144945_ * p_144945_;
    }
@@ -547,14 +_,26 @@
       return p_184644_ * p_184644_;
    }
 
+   public static me.alphamode.mclong.math.BigInteger square(me.alphamode.mclong.math.BigInteger pValue) {
+      return pValue.multiply(pValue);
+   }
+
    public static double m_144851_(double p_144852_, double p_144853_, double p_144854_, double p_144855_, double p_144856_) {
       return m_14085_(p_144855_, p_144856_, m_14112_(p_144852_, p_144853_, p_144854_));
    }
 
+   public static me.alphamode.mclong.math.BigDecimal clampedMap(me.alphamode.mclong.math.BigDecimal pInput, me.alphamode.mclong.math.BigDecimal pInputMin, me.alphamode.mclong.math.BigDecimal pInputMax, me.alphamode.mclong.math.BigDecimal pOuputMin, me.alphamode.mclong.math.BigDecimal pOutputMax) {
+      return clampedLerp(pOuputMin, pOutputMax, inverseLerp(pInput, pInputMin, pInputMax));
+   }
+
    public static float m_184631_(float p_184632_, float p_184633_, float p_184634_, float p_184635_, float p_184636_) {
       return m_144920_(p_184635_, p_184636_, m_184655_(p_184632_, p_184633_, p_184634_));
    }
 
+   public static me.alphamode.mclong.math.BigDecimal map(me.alphamode.mclong.math.BigDecimal pInput, me.alphamode.mclong.math.BigDecimal pInputMin, me.alphamode.mclong.math.BigDecimal pInputMax, me.alphamode.mclong.math.BigDecimal pOutputMin, me.alphamode.mclong.math.BigDecimal pOutputMax) {
+      return lerp(inverseLerp(pInput, pInputMin, pInputMax), pOutputMin, pOutputMax);
+   }
+
    public static double m_144914_(double p_144915_, double p_144916_, double p_144917_, double p_144918_, double p_144919_) {
       return m_14139_(m_14112_(p_144915_, p_144916_, p_144917_), p_144918_, p_144919_);
    }
@@ -579,6 +_,10 @@
       return p_216288_.m_188503_(p_216290_ - p_216289_ + 1) + p_216289_;
    }
 
+   public static long randomBetweenInclusive(RandomSource pRandom, long pMinInclusive, long pMaxInclusive) {
+      return pRandom.nextLong(pMaxInclusive - pMinInclusive + 1) + pMinInclusive;
+   }
+
    public static float m_216283_(RandomSource p_216284_, float p_216285_, float p_216286_) {
       return p_216284_.m_188501_() * (p_216286_ - p_216285_) + p_216285_;
    }
@@ -595,6 +_,22 @@
       return Math.sqrt(m_211589_(p_184646_, p_184647_));
    }
 
+   public static me.alphamode.mclong.math.BigDecimal lengthSquared(me.alphamode.mclong.math.BigDecimal pXDistance, me.alphamode.mclong.math.BigDecimal pYDistance) {
+      return pXDistance.multiply(pXDistance).add(pYDistance.multiply(pYDistance));
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal length(me.alphamode.mclong.math.BigDecimal pXDistance, me.alphamode.mclong.math.BigDecimal pYDistance) {
+      return lengthSquared(pXDistance, pYDistance).sqrt();
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal lengthSquared(me.alphamode.mclong.math.BigDecimal pXDistance, me.alphamode.mclong.math.BigDecimal pYDistance, me.alphamode.mclong.math.BigDecimal pZDistance) {
+      return pXDistance.multiply(pXDistance).add(pYDistance.multiply(pYDistance)).add(pZDistance.multiply(pZDistance));
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal length(me.alphamode.mclong.math.BigDecimal pXDistance, me.alphamode.mclong.math.BigDecimal pYDistance, me.alphamode.mclong.math.BigDecimal pZDistance) {
+      return lengthSquared(pXDistance, pYDistance, pZDistance).sqrt();
+   }
+
    public static double m_211592_(double p_211593_, double p_211594_, double p_211595_) {
       return p_211593_ * p_211593_ + p_211594_ * p_211594_ + p_211595_ * p_211595_;
    }
@@ -607,33 +_,41 @@
       return m_14107_(p_184629_ / (double)p_184630_) * p_184630_;
    }
 
-   public static IntStream m_216295_(int p_216296_, int p_216297_, int p_216298_) {
-      return m_216250_(p_216296_, p_216297_, p_216298_, 1);
+   public static java.util.stream.LongStream outFromOrigin(long pInput, long pLowerBound, long pUpperBound) {
+      return outFromOrigin(pInput, pLowerBound, pUpperBound, 1);
    }
 
-   public static IntStream m_216250_(int p_216251_, int p_216252_, int p_216253_, int p_216254_) {
-      if (p_216252_ > p_216253_) {
-         throw new IllegalArgumentException(String.format(Locale.ROOT, "upperbound %d expected to be > lowerBound %d", p_216253_, p_216252_));
-      } else if (p_216254_ < 1) {
-         throw new IllegalArgumentException(String.format(Locale.ROOT, "steps expected to be >= 1, was %d", p_216254_));
+   public static java.util.stream.LongStream outFromOrigin(long pInput, long pLowerBound, long pUpperBound, long pSteps) {
+      if (pLowerBound > pUpperBound) {
+         throw new IllegalArgumentException(String.format(Locale.ROOT, "upperbound %d expected to be > lowerBound %d", pUpperBound, pLowerBound));
+      } else if (pSteps < 1) {
+         throw new IllegalArgumentException(String.format(Locale.ROOT, "steps expected to be >= 1, was %d", pSteps));
       } else {
-         return p_216251_ >= p_216252_ && p_216251_ <= p_216253_ ? IntStream.iterate(p_216251_, (p_216282_) -> {
-            int i = Math.abs(p_216251_ - p_216282_);
-            return p_216251_ - i >= p_216252_ || p_216251_ + i <= p_216253_;
+         return pInput >= pLowerBound && pInput <= pUpperBound ? java.util.stream.LongStream.iterate(pInput, (p_216282_) -> {
+            long i = Math.abs(pInput - p_216282_);
+            return pInput - i >= pLowerBound || pInput + i <= pUpperBound;
          }, (p_216260_) -> {
-            boolean flag = p_216260_ <= p_216251_;
-            int i = Math.abs(p_216251_ - p_216260_);
-            boolean flag1 = p_216251_ + i + p_216254_ <= p_216253_;
+            boolean flag = p_216260_ <= pInput;
+            long i = Math.abs(pInput - p_216260_);
+            boolean flag1 = pInput + i + pSteps <= pUpperBound;
             if (!flag || !flag1) {
-               int j = p_216251_ - i - (flag ? p_216254_ : 0);
-               if (j >= p_216252_) {
+               long j = pInput - i - (flag ? pSteps : 0);
+               if (j >= pLowerBound) {
                   return j;
                }
             }
 
-            return p_216251_ + i + p_216254_;
-         }) : IntStream.empty();
+            return pInput + i + pSteps;
+         }) : java.util.stream.LongStream.empty();
       }
+   }
+
+   public static boolean fuzzyEquals(me.alphamode.mclong.math.BigDecimal num1, me.alphamode.mclong.math.BigDecimal num2, me.alphamode.mclong.math.BigDecimal epsilon) {
+      // Calculate the absolute difference between num1 and num2
+      me.alphamode.mclong.math.BigDecimal absDiff = num1.subtract(num2).abs();
+
+      // Compare the absolute difference with the epsilon
+      return absDiff.compareTo(epsilon) <= 0;
    }
 
    static {
