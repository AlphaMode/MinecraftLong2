--- a/net/minecraft/util/Mth.java
+++ b/net/minecraft/util/Mth.java
@@ -65,10 +_,22 @@
       return p_14135_ < (double)i ? i - 1L : i;
    }
 
+   public static me.alphamode.mclong.math.BigInteger lfloor(me.alphamode.mclong.math.BigDecimal val) {
+      return val.setScale(0, java.math.RoundingMode.FLOOR).toBigInteger();
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal lfloorD(me.alphamode.mclong.math.BigDecimal val) {
+      return val.setScale(0, java.math.RoundingMode.FLOOR);
+   }
+
    public static float m_14154_(float p_14155_) {
       return Math.abs(p_14155_);
    }
 
+   public static long abs(long p_14041_) {
+      return Math.abs(p_14041_);
+   }
+
    public static int m_14040_(int p_14041_) {
       return Math.abs(p_14041_);
    }
@@ -83,10 +_,23 @@
       return p_14166_ > (double)i ? i + 1 : i;
    }
 
+   public static long lceil(double p_14166_) {
+      long i = (long)p_14166_;
+      return p_14166_ > (double)i ? i + 1 : i;
+   }
+
+   public static me.alphamode.mclong.math.BigInteger lceil(me.alphamode.mclong.math.BigDecimal val) {
+      return val.setScale(0, java.math.RoundingMode.CEILING).toBigInteger();
+   }
+
    public static int m_14045_(int p_14046_, int p_14047_, int p_14048_) {
       return Math.min(Math.max(p_14046_, p_14047_), p_14048_);
    }
 
+   public static long clamp(long p_14046_, long p_14047_, long p_14048_) {
+      return Math.min(Math.max(p_14046_, p_14047_), p_14048_);
+   }
+
    public static float m_14036_(float p_14037_, float p_14038_, float p_14039_) {
       return p_14037_ < p_14038_ ? p_14038_ : Math.min(p_14037_, p_14039_);
    }
@@ -95,6 +_,18 @@
       return p_14009_ < p_14010_ ? p_14010_ : Math.min(p_14009_, p_14011_);
    }
 
+   public static me.alphamode.mclong.math.BigDecimal clamp(me.alphamode.mclong.math.BigDecimal p_14009_, me.alphamode.mclong.math.BigDecimal p_14010_, me.alphamode.mclong.math.BigDecimal p_14011_) {
+      return p_14009_.compareTo(p_14010_) < 0 ? p_14010_ : p_14009_.min(p_14011_);
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal clampedLerp(me.alphamode.mclong.math.BigDecimal p_14086_, me.alphamode.mclong.math.BigDecimal p_14087_, me.alphamode.mclong.math.BigDecimal p_14088_) {
+      if (p_14088_.compareTo(me.alphamode.mclong.math.BigDecimal.ZERO) < 0) {
+         return p_14086_;
+      } else {
+         return p_14088_.compareTo(me.alphamode.mclong.math.BigDecimal.ONE) > 0 ? p_14087_ : lerp(p_14088_, p_14086_, p_14087_);
+      }
+   }
+
    public static double m_14085_(double p_14086_, double p_14087_, double p_14088_) {
       if (p_14088_ < 0.0D) {
          return p_14086_;
@@ -123,10 +_,22 @@
       return Math.max(p_14006_, p_14007_);
    }
 
+   public static long longFloorDiv(long p_14043_, long p_14044_) {
+      return Math.floorDiv(p_14043_, p_14044_);
+   }
+
+   public static me.alphamode.mclong.math.BigInteger floorDiv(me.alphamode.mclong.math.BigInteger p_14043_, me.alphamode.mclong.math.BigInteger p_14044_) {
+      return me.alphamode.mclong.math.BigMath.floorDiv(p_14043_, p_14044_);
+   }
+
    public static int m_14042_(int p_14043_, int p_14044_) {
       return Math.floorDiv(p_14043_, p_14044_);
    }
 
+   public static long nextLong(RandomSource p_216272_, long p_216273_, long p_216274_) {
+      return p_216273_ >= p_216274_ ? p_216273_ : p_216272_.nextLong(p_216274_ - p_216273_ + 1) + p_216273_;
+   }
+
    public static int m_216271_(RandomSource p_216272_, int p_216273_, int p_216274_) {
       return p_216273_ >= p_216274_ ? p_216273_ : p_216272_.m_188503_(p_216274_ - p_216273_ + 1) + p_216273_;
    }
@@ -139,6 +_,10 @@
       return p_216265_ >= p_216266_ ? p_216265_ : p_216264_.m_188500_() * (p_216266_ - p_216265_) + p_216265_;
    }
 
+   public static me.alphamode.mclong.math.BigDecimal nextDouble(RandomSource p_216264_, me.alphamode.mclong.math.BigDecimal p_216265_, me.alphamode.mclong.math.BigDecimal p_216266_) {
+      return p_216265_.compareTo(p_216266_) >= 0 ? p_216265_ : me.alphamode.mclong.math.BigDecimal.valueOf(p_216264_.m_188500_()).multiply((p_216266_.subtract(p_216265_))).add(p_216265_);
+   }
+
    public static boolean m_14033_(float p_14034_, float p_14035_) {
       return Math.abs(p_14035_ - p_14034_) < 1.0E-5F;
    }
@@ -147,10 +_,22 @@
       return Math.abs(p_14084_ - p_14083_) < (double)1.0E-5F;
    }
 
+   public static boolean equal(me.alphamode.mclong.math.BigDecimal a, me.alphamode.mclong.math.BigDecimal b) {
+      return b.subtract(a).abs().compareTo(me.alphamode.mclong.core.BigConstants.EPSILON_EQUAL) < 0;
+   }
+
    public static int m_14100_(int p_14101_, int p_14102_) {
       return Math.floorMod(p_14101_, p_14102_);
    }
 
+   public static long positiveModulo(long p_14101_, long p_14102_) {
+      return Math.floorMod(p_14101_, p_14102_);
+   }
+
+   public static me.alphamode.mclong.math.BigInteger positiveModulo(me.alphamode.mclong.math.BigInteger p_14101_, me.alphamode.mclong.math.BigInteger p_14102_) {
+      return me.alphamode.mclong.math.BigMath.floorMod(p_14101_, p_14102_);
+   }
+
    public static float m_14091_(float p_14092_, float p_14093_) {
       return (p_14092_ % p_14093_ + p_14093_) % p_14093_;
    }
@@ -240,17 +_,32 @@
       return i + 1;
    }
 
-   public static boolean m_14152_(int p_14153_) {
+   public static long smallestEncompassingPowerOfTwo(long p_14126_) {
+      long i = p_14126_ - 1;
+      i |= i >> 1;
+      i |= i >> 2;
+      i |= i >> 4;
+      i |= i >> 8;
+      i |= i >> 16;
+      return i + 1;
+   }
+
+   public static boolean isPowerOfTwo(long p_14153_) {
       return p_14153_ != 0 && (p_14153_ & p_14153_ - 1) == 0;
    }
 
    public static int m_14163_(int p_14164_) {
-      p_14164_ = m_14152_(p_14164_) ? p_14164_ : m_14125_(p_14164_);
+      p_14164_ = isPowerOfTwo(p_14164_) ? p_14164_ : m_14125_(p_14164_);
+      return f_13997_[(int)((long)p_14164_ * 125613361L >> 27) & 31];
+   }
+
+   public static long ceillog2(long p_14164_) {
+      p_14164_ = isPowerOfTwo(p_14164_) ? p_14164_ : smallestEncompassingPowerOfTwo(p_14164_);
       return f_13997_[(int)((long)p_14164_ * 125613361L >> 27) & 31];
    }
 
    public static int m_14173_(int p_14174_) {
-      return m_14163_(p_14174_) - (m_14152_(p_14174_) ? 0 : 1);
+      return m_14163_(p_14174_) - (isPowerOfTwo(p_14174_) ? 0 : 1);
    }
 
    public static int m_14159_(float p_14160_, float p_14161_, float p_14162_) {
@@ -265,15 +_,19 @@
       return p_14186_ - (double)m_14134_(p_14186_);
    }
 
-   /** @deprecated */
-   @Deprecated
-   public static long m_14057_(Vec3i p_14058_) {
-      return m_14130_(p_14058_.m_123341_(), p_14058_.m_123342_(), p_14058_.m_123343_());
-   }
-
-   /** @deprecated */
-   @Deprecated
-   public static long m_14130_(int p_14131_, int p_14132_, int p_14133_) {
+   public static me.alphamode.mclong.math.BigDecimal frac(me.alphamode.mclong.math.BigDecimal p_14186_) {
+      return p_14186_.subtract(lfloor(p_14186_).toBigDecimal());
+   }
+
+   /** @deprecated */
+   @Deprecated
+   public static long getSeed(me.alphamode.mclong.core.Vec3l p_14058_) {
+      return getSeed(p_14058_.getX(), p_14058_.getY(), p_14058_.getZ());
+   }
+
+   /** @deprecated */
+   @Deprecated
+   public static long getSeed(long p_14131_, long p_14132_, long p_14133_) {
       long i = (long)(p_14131_ * 3129871) ^ (long)p_14133_ * 116129781L ^ (long)p_14132_;
       i = i * i * 42317861L + i * 11L;
       return i >> 16;
@@ -289,6 +_,10 @@
       return m_216261_(f_13996_);
    }
 
+   public static me.alphamode.mclong.math.BigDecimal inverseLerp(me.alphamode.mclong.math.BigDecimal p_14113_, me.alphamode.mclong.math.BigDecimal p_14114_, me.alphamode.mclong.math.BigDecimal p_14115_) {
+      return (p_14113_.subtract(p_14114_)).divide((p_14115_.subtract(p_14114_)));
+   }
+
    public static double m_14112_(double p_14113_, double p_14114_, double p_14115_) {
       return (p_14113_ - p_14114_) / (p_14115_ - p_14114_);
    }
@@ -298,36 +_,36 @@
    }
 
    public static boolean m_144888_(Vec3 p_144889_, Vec3 p_144890_, AABB p_144891_) {
-      double d0 = (p_144891_.f_82288_ + p_144891_.f_82291_) * 0.5D;
-      double d1 = (p_144891_.f_82291_ - p_144891_.f_82288_) * 0.5D;
-      double d2 = p_144889_.f_82479_ - d0;
-      if (Math.abs(d2) > d1 && d2 * p_144890_.f_82479_ >= 0.0D) {
+      double d0 = (p_144891_.f_82288_.doubleValue() + p_144891_.f_82291_.doubleValue()) * 0.5D;
+      double d1 = (p_144891_.f_82291_.doubleValue() - p_144891_.f_82288_.doubleValue()) * 0.5D;
+      double d2 = p_144889_.m_7096_() - d0;
+      if (Math.abs(d2) > d1 && d2 * p_144890_.m_7096_() >= 0.0D) {
          return false;
       } else {
-         double d3 = (p_144891_.f_82289_ + p_144891_.f_82292_) * 0.5D;
-         double d4 = (p_144891_.f_82292_ - p_144891_.f_82289_) * 0.5D;
-         double d5 = p_144889_.f_82480_ - d3;
-         if (Math.abs(d5) > d4 && d5 * p_144890_.f_82480_ >= 0.0D) {
+         double d3 = (p_144891_.f_82289_.doubleValue() + p_144891_.f_82292_.doubleValue()) * 0.5D;
+         double d4 = (p_144891_.f_82292_.doubleValue() - p_144891_.f_82289_.doubleValue()) * 0.5D;
+         double d5 = p_144889_.m_7098_() - d3;
+         if (Math.abs(d5) > d4 && d5 * p_144890_.m_7098_() >= 0.0D) {
             return false;
          } else {
-            double d6 = (p_144891_.f_82290_ + p_144891_.f_82293_) * 0.5D;
-            double d7 = (p_144891_.f_82293_ - p_144891_.f_82290_) * 0.5D;
-            double d8 = p_144889_.f_82481_ - d6;
-            if (Math.abs(d8) > d7 && d8 * p_144890_.f_82481_ >= 0.0D) {
+            double d6 = (p_144891_.f_82290_.doubleValue() + p_144891_.f_82293_.doubleValue()) * 0.5D;
+            double d7 = (p_144891_.f_82293_.doubleValue() - p_144891_.f_82290_.doubleValue()) * 0.5D;
+            double d8 = p_144889_.m_7094_() - d6;
+            if (Math.abs(d8) > d7 && d8 * p_144890_.m_7094_() >= 0.0D) {
                return false;
             } else {
-               double d9 = Math.abs(p_144890_.f_82479_);
-               double d10 = Math.abs(p_144890_.f_82480_);
-               double d11 = Math.abs(p_144890_.f_82481_);
-               double d12 = p_144890_.f_82480_ * d8 - p_144890_.f_82481_ * d5;
+               double d9 = Math.abs(p_144890_.m_7096_());
+               double d10 = Math.abs(p_144890_.m_7098_());
+               double d11 = Math.abs(p_144890_.m_7094_());
+               double d12 = p_144890_.m_7098_() * d8 - p_144890_.m_7094_() * d5;
                if (Math.abs(d12) > d4 * d11 + d7 * d10) {
                   return false;
                } else {
-                  d12 = p_144890_.f_82481_ * d2 - p_144890_.f_82479_ * d8;
+                  d12 = p_144890_.m_7094_() * d2 - p_144890_.m_7096_() * d8;
                   if (Math.abs(d12) > d1 * d11 + d7 * d9) {
                      return false;
                   } else {
-                     d12 = p_144890_.f_82479_ * d5 - p_144890_.f_82480_ * d2;
+                     d12 = p_144890_.m_7096_() * d5 - p_144890_.m_7098_() * d2;
                      return Math.abs(d12) < d1 * d10 + d4 * d9;
                   }
                }
@@ -495,6 +_,22 @@
       return p_14141_ + p_14140_ * (p_14142_ - p_14141_);
    }
 
+   public static me.alphamode.mclong.math.BigDecimal lerp(me.alphamode.mclong.math.BigDecimal p_14140_, me.alphamode.mclong.math.BigDecimal p_14141_, me.alphamode.mclong.math.BigDecimal p_14142_) {
+      return p_14141_.add(p_14140_.multiply(p_14142_.subtract(p_14141_)));
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal lerp(double p_14140_, me.alphamode.mclong.math.BigDecimal p_14141_, me.alphamode.mclong.math.BigDecimal p_14142_) {
+      return p_14141_.add(me.alphamode.mclong.math.BigDecimal.valueOf(p_14140_).multiply(p_14142_.subtract(p_14141_)));
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal lerp2(me.alphamode.mclong.math.BigDecimal p_14013_, me.alphamode.mclong.math.BigDecimal p_14014_, me.alphamode.mclong.math.BigDecimal p_14015_, me.alphamode.mclong.math.BigDecimal p_14016_, me.alphamode.mclong.math.BigDecimal p_14017_, me.alphamode.mclong.math.BigDecimal p_14018_) {
+      return lerp(p_14014_, lerp(p_14013_, p_14015_, p_14016_), lerp(p_14013_, p_14017_, p_14018_));
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal lerp3(me.alphamode.mclong.math.BigDecimal p_14020_, me.alphamode.mclong.math.BigDecimal p_14021_, me.alphamode.mclong.math.BigDecimal p_14022_, me.alphamode.mclong.math.BigDecimal p_14023_, me.alphamode.mclong.math.BigDecimal p_14024_, me.alphamode.mclong.math.BigDecimal p_14025_, me.alphamode.mclong.math.BigDecimal p_14026_, me.alphamode.mclong.math.BigDecimal p_14027_, me.alphamode.mclong.math.BigDecimal p_14028_, me.alphamode.mclong.math.BigDecimal p_14029_, me.alphamode.mclong.math.BigDecimal p_14030_) {
+      return lerp(p_14022_, lerp2(p_14020_, p_14021_, p_14023_, p_14024_, p_14025_, p_14026_), lerp2(p_14020_, p_14021_, p_14027_, p_14028_, p_14029_, p_14030_));
+   }
+
    public static double m_14012_(double p_14013_, double p_14014_, double p_14015_, double p_14016_, double p_14017_, double p_14018_) {
       return m_14139_(p_14014_, m_14139_(p_14013_, p_14015_, p_14016_), m_14139_(p_14013_, p_14017_, p_14018_));
    }
@@ -511,6 +_,10 @@
       return p_14198_ * p_14198_ * p_14198_ * (p_14198_ * (p_14198_ * 6.0D - 15.0D) + 10.0D);
    }
 
+   public static me.alphamode.mclong.math.BigDecimal smoothstep(me.alphamode.mclong.math.BigDecimal p_14198_) {
+      return p_14198_.multiply(p_14198_).multiply(p_14198_).multiply((p_14198_.multiply((p_14198_.multiply(me.alphamode.mclong.core.BigConstants.SIX).subtract(me.alphamode.mclong.core.BigConstants.FIFTEEN))).add(me.alphamode.mclong.core.BigConstants.TEN)));
+   }
+
    public static double m_144946_(double p_144947_) {
       return 30.0D * p_144947_ * p_144947_ * (p_144947_ - 1.0D) * (p_144947_ - 1.0D);
    }
@@ -523,6 +_,14 @@
       }
    }
 
+   public static int sign(me.alphamode.mclong.math.BigDecimal val) {
+      if (val.equals(me.alphamode.mclong.math.BigDecimal.ZERO) | val.equals(me.alphamode.mclong.math.BigDecimal.REAL_ZERO)) {
+         return 0;
+      } else {
+         return val.compareTo(me.alphamode.mclong.math.BigDecimal.ZERO) > 0 ? 1 : -1;
+      }
+   }
+
    public static float m_14189_(float p_14190_, float p_14191_, float p_14192_) {
       return p_14191_ + p_14190_ * m_14177_(p_14192_ - p_14191_);
    }
@@ -539,6 +_,10 @@
       return p_144953_ * p_144953_;
    }
 
+   public static me.alphamode.mclong.math.BigDecimal square(me.alphamode.mclong.math.BigDecimal p_144953_) {
+      return p_144953_.multiply(p_144953_);
+   }
+
    public static int m_144944_(int p_144945_) {
       return p_144945_ * p_144945_;
    }
@@ -547,14 +_,26 @@
       return p_184644_ * p_184644_;
    }
 
+   public static me.alphamode.mclong.math.BigInteger square(me.alphamode.mclong.math.BigInteger p_184644_) {
+      return p_184644_.multiply(p_184644_);
+   }
+
    public static double m_144851_(double p_144852_, double p_144853_, double p_144854_, double p_144855_, double p_144856_) {
       return m_14085_(p_144855_, p_144856_, m_14112_(p_144852_, p_144853_, p_144854_));
    }
 
+   public static me.alphamode.mclong.math.BigDecimal clampedMap(me.alphamode.mclong.math.BigDecimal p_144852_, me.alphamode.mclong.math.BigDecimal p_144853_, me.alphamode.mclong.math.BigDecimal p_144854_, me.alphamode.mclong.math.BigDecimal p_144855_, me.alphamode.mclong.math.BigDecimal p_144856_) {
+      return clampedLerp(p_144855_, p_144856_, inverseLerp(p_144852_, p_144853_, p_144854_));
+   }
+
    public static float m_184631_(float p_184632_, float p_184633_, float p_184634_, float p_184635_, float p_184636_) {
       return m_144920_(p_184635_, p_184636_, m_184655_(p_184632_, p_184633_, p_184634_));
    }
 
+   public static me.alphamode.mclong.math.BigDecimal map(me.alphamode.mclong.math.BigDecimal p_144915_, me.alphamode.mclong.math.BigDecimal p_144916_, me.alphamode.mclong.math.BigDecimal p_144917_, me.alphamode.mclong.math.BigDecimal p_144918_, me.alphamode.mclong.math.BigDecimal p_144919_) {
+      return lerp(inverseLerp(p_144915_, p_144916_, p_144917_), p_144918_, p_144919_);
+   }
+
    public static double m_144914_(double p_144915_, double p_144916_, double p_144917_, double p_144918_, double p_144919_) {
       return m_14139_(m_14112_(p_144915_, p_144916_, p_144917_), p_144918_, p_144919_);
    }
@@ -579,6 +_,10 @@
       return p_216288_.m_188503_(p_216290_ - p_216289_ + 1) + p_216289_;
    }
 
+   public static long randomBetweenInclusive(RandomSource p_216288_, long p_216289_, long p_216290_) {
+      return p_216288_.nextLong(p_216290_ - p_216289_ + 1) + p_216289_;
+   }
+
    public static float m_216283_(RandomSource p_216284_, float p_216285_, float p_216286_) {
       return p_216284_.m_188501_() * (p_216286_ - p_216285_) + p_216285_;
    }
@@ -595,6 +_,22 @@
       return Math.sqrt(m_211589_(p_184646_, p_184647_));
    }
 
+   public static me.alphamode.mclong.math.BigDecimal lengthSquared(me.alphamode.mclong.math.BigDecimal p_211590_, me.alphamode.mclong.math.BigDecimal p_211591_) {
+      return p_211590_.multiply(p_211590_).add(p_211591_.multiply(p_211591_));
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal length(me.alphamode.mclong.math.BigDecimal p_184646_, me.alphamode.mclong.math.BigDecimal p_184647_) {
+      return lengthSquared(p_184646_, p_184647_).sqrt();
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal lengthSquared(me.alphamode.mclong.math.BigDecimal p_211593_, me.alphamode.mclong.math.BigDecimal p_211594_, me.alphamode.mclong.math.BigDecimal p_211595_) {
+      return p_211593_.multiply(p_211593_).add(p_211594_.multiply(p_211594_)).add(p_211595_.multiply(p_211595_));
+   }
+
+   public static me.alphamode.mclong.math.BigDecimal length(me.alphamode.mclong.math.BigDecimal p_184649_, me.alphamode.mclong.math.BigDecimal p_184650_, me.alphamode.mclong.math.BigDecimal p_184651_) {
+      return lengthSquared(p_184649_, p_184650_, p_184651_).sqrt();
+   }
+
    public static double m_211592_(double p_211593_, double p_211594_, double p_211595_) {
       return p_211593_ * p_211593_ + p_211594_ * p_211594_ + p_211595_ * p_211595_;
    }
@@ -607,33 +_,41 @@
       return m_14107_(p_184629_ / (double)p_184630_) * p_184630_;
    }
 
-   public static IntStream m_216295_(int p_216296_, int p_216297_, int p_216298_) {
-      return m_216250_(p_216296_, p_216297_, p_216298_, 1);
+   public static java.util.stream.LongStream outFromOrigin(long p_216296_, long p_216297_, long p_216298_) {
+      return outFromOrigin(p_216296_, p_216297_, p_216298_, 1);
    }
 
-   public static IntStream m_216250_(int p_216251_, int p_216252_, int p_216253_, int p_216254_) {
+   public static java.util.stream.LongStream outFromOrigin(long p_216251_, long p_216252_, long p_216253_, long p_216254_) {
       if (p_216252_ > p_216253_) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "upperbound %d expected to be > lowerBound %d", p_216253_, p_216252_));
       } else if (p_216254_ < 1) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "steps expected to be >= 1, was %d", p_216254_));
       } else {
-         return p_216251_ >= p_216252_ && p_216251_ <= p_216253_ ? IntStream.iterate(p_216251_, (p_216282_) -> {
-            int i = Math.abs(p_216251_ - p_216282_);
+         return p_216251_ >= p_216252_ && p_216251_ <= p_216253_ ? java.util.stream.LongStream.iterate(p_216251_, (p_216282_) -> {
+            long i = Math.abs(p_216251_ - p_216282_);
             return p_216251_ - i >= p_216252_ || p_216251_ + i <= p_216253_;
          }, (p_216260_) -> {
             boolean flag = p_216260_ <= p_216251_;
-            int i = Math.abs(p_216251_ - p_216260_);
+            long i = Math.abs(p_216251_ - p_216260_);
             boolean flag1 = p_216251_ + i + p_216254_ <= p_216253_;
             if (!flag || !flag1) {
-               int j = p_216251_ - i - (flag ? p_216254_ : 0);
+               long j = p_216251_ - i - (flag ? p_216254_ : 0);
                if (j >= p_216252_) {
                   return j;
                }
             }
 
             return p_216251_ + i + p_216254_;
-         }) : IntStream.empty();
+         }) : java.util.stream.LongStream.empty();
       }
+   }
+
+   public static boolean fuzzyEquals(me.alphamode.mclong.math.BigDecimal num1, me.alphamode.mclong.math.BigDecimal num2, me.alphamode.mclong.math.BigDecimal epsilon) {
+      // Calculate the absolute difference between num1 and num2
+      me.alphamode.mclong.math.BigDecimal absDiff = num1.subtract(num2).abs();
+
+      // Compare the absolute difference with the epsilon
+      return absDiff.compareTo(epsilon) <= 0;
    }
 
    static {
