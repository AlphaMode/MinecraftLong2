--- a/net/minecraft/world/level/lighting/LevelLightEngine.java
+++ b/net/minecraft/world/level/lighting/LevelLightEngine.java
@@ -9,7 +_,7 @@
 import net.minecraft.world.level.chunk.DataLayer;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 
-public class LevelLightEngine implements LightEventListener {
+public class LevelLightEngine implements LightEventListener, ca.spottedleaf.starlight.common.light.StarLightLightingProvider {
    public static final int f_164443_ = 15;
    public static final int f_164444_ = 1;
    protected final LevelHeightAccessor f_164445_;
@@ -18,131 +_,155 @@
    @Nullable
    private final LayerLightEngine<?, ?> f_75803_;
 
+   protected final it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<ChunkPos, ca.spottedleaf.starlight.common.light.SWMRNibbleArray[]> blockLightMap = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>();
+
+   protected final it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<ChunkPos, ca.spottedleaf.starlight.common.light.SWMRNibbleArray[]> skyLightMap = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>();
+
+   protected ca.spottedleaf.starlight.common.light.StarLightInterface lightEngine;
+
+   public ca.spottedleaf.starlight.common.light.StarLightInterface getLightEngine() {
+      return this.lightEngine;
+   }
+
+   public void clientUpdateLight(final LightLayer lightType, final SectionPos pos,
+                                 final DataLayer nibble, final boolean trustEdges) {
+      if (((Object)this).getClass() != LevelLightEngine.class) {
+         throw new IllegalStateException("This hook is for the CLIENT ONLY");
+      }
+      // data storage changed with new light impl
+      final net.minecraft.world.level.chunk.ChunkAccess chunk = this.getLightEngine().getAnyChunkNow(pos.getX(), pos.getZ());
+      switch (lightType) {
+         case BLOCK: {
+            final ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] blockNibbles = this.blockLightMap.computeIfAbsent(pos.m_123251_(), (final ChunkPos keyInMap) -> {
+               return ca.spottedleaf.starlight.common.light.StarLightEngine.getFilledEmptyLight(this.lightEngine.getWorld());
+            });
+
+            blockNibbles[(int) (pos.getY() - ca.spottedleaf.starlight.common.util.WorldUtil.getMinLightSection(this.lightEngine.getWorld()))] = ca.spottedleaf.starlight.common.light.SWMRNibbleArray.fromVanilla(nibble);
+
+            if (chunk != null) {
+               chunk.setBlockNibbles(blockNibbles);
+               this.lightEngine.getLightAccess().m_6506_(LightLayer.BLOCK, pos);
+            }
+            break;
+         }
+         case SKY: {
+            final ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] skyNibbles = this.skyLightMap.computeIfAbsent(pos.m_123251_(), (final ChunkPos keyInMap) -> {
+               return ca.spottedleaf.starlight.common.light.StarLightEngine.getFilledEmptyLight(this.lightEngine.getWorld());
+            });
+
+            skyNibbles[(int) (pos.getY() - ca.spottedleaf.starlight.common.util.WorldUtil.getMinLightSection(this.lightEngine.getWorld()))] = ca.spottedleaf.starlight.common.light.SWMRNibbleArray.fromVanilla(nibble);
+
+            if (chunk != null) {
+               chunk.setSkyNibbles(skyNibbles);
+               this.lightEngine.getLightAccess().m_6506_(LightLayer.SKY, pos);
+            }
+            break;
+         }
+      }
+   }
+
+   public void clientRemoveLightData(final ChunkPos chunkPos) {
+      if (((Object)this).getClass() != LevelLightEngine.class) {
+         throw new IllegalStateException("This hook is for the CLIENT ONLY");
+      }
+      this.blockLightMap.remove(chunkPos);
+      this.skyLightMap.remove(chunkPos);
+   }
+
+   public void clientChunkLoad(final ChunkPos pos, final net.minecraft.world.level.chunk.LevelChunk chunk) {
+      if (((Object)this).getClass() != LevelLightEngine.class) {
+         throw new IllegalStateException("This hook is for the CLIENT ONLY");
+      }
+      final ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] blockNibbles = this.blockLightMap.get(pos);
+      final ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] skyNibbles = this.skyLightMap.get(pos);
+      if (blockNibbles != null) {
+         chunk.setBlockNibbles(blockNibbles);
+      }
+      if (skyNibbles != null) {
+         chunk.setSkyNibbles(skyNibbles);
+      }
+   }
+
    public LevelLightEngine(LightChunkGetter p_75805_, boolean p_75806_, boolean p_75807_) {
       this.f_164445_ = p_75805_.m_7653_();
-      this.f_75802_ = p_75806_ ? new BlockLightEngine(p_75805_) : null;
-      this.f_75803_ = p_75807_ ? new SkyLightEngine(p_75805_) : null;
+      // avoid ClassCastException in cases where custom LightChunkGetters do not return a Level from getLevel()
+      if (p_75805_.m_7653_() instanceof net.minecraft.world.level.Level) {
+         this.lightEngine = new ca.spottedleaf.starlight.common.light.StarLightInterface(p_75805_, p_75807_, p_75806_, (LevelLightEngine)(Object)this);
+      } else {
+         this.lightEngine = new ca.spottedleaf.starlight.common.light.StarLightInterface(null, p_75807_, p_75806_, (LevelLightEngine)(Object)this);
+      }
+      // intentionally destroy mods hooking into old light engine state
+      this.f_75802_ = null;
+      this.f_75803_ = null;
    }
 
    public void m_7174_(BlockPos p_75823_) {
-      if (this.f_75802_ != null) {
-         this.f_75802_.m_7174_(p_75823_);
-      }
-
-      if (this.f_75803_ != null) {
-         this.f_75803_.m_7174_(p_75823_);
-      }
-
+      this.lightEngine.blockChange(p_75823_.m_7949_());
    }
 
    public void m_8116_(BlockPos p_75824_, int p_75825_) {
-      if (this.f_75802_ != null) {
-         this.f_75802_.m_8116_(p_75824_, p_75825_);
-      }
 
    }
 
    public boolean m_75643_() {
-      if (this.f_75803_ != null && this.f_75803_.m_75643_()) {
-         return true;
-      } else {
-         return this.f_75802_ != null && this.f_75802_.m_75643_();
-      }
+      return this.lightEngine.hasUpdates();
    }
 
    public int m_5738_(int p_75809_, boolean p_75810_, boolean p_75811_) {
-      if (this.f_75802_ != null && this.f_75803_ != null) {
-         int i = p_75809_ / 2;
-         int j = this.f_75802_.m_5738_(i, p_75810_, p_75811_);
-         int k = p_75809_ - i + j;
-         int l = this.f_75803_.m_5738_(k, p_75810_, p_75811_);
-         return j == 0 && l > 0 ? this.f_75802_.m_5738_(l, p_75810_, p_75811_) : l;
-      } else if (this.f_75802_ != null) {
-         return this.f_75802_.m_5738_(p_75809_, p_75810_, p_75811_);
-      } else {
-         return this.f_75803_ != null ? this.f_75803_.m_5738_(p_75809_, p_75810_, p_75811_) : p_75809_;
-      }
+      // replace impl
+      final boolean hadUpdates = this.m_75643_();
+      this.lightEngine.propagateChanges();
+      return hadUpdates ? 1 : 0;
    }
 
    public void m_6191_(SectionPos p_75827_, boolean p_75828_) {
-      if (this.f_75802_ != null) {
-         this.f_75802_.m_6191_(p_75827_, p_75828_);
-      }
-
-      if (this.f_75803_ != null) {
-         this.f_75803_.m_6191_(p_75827_, p_75828_);
-      }
+      this.lightEngine.sectionChange(p_75827_, p_75828_);
 
    }
 
    public void m_6460_(ChunkPos p_75812_, boolean p_75813_) {
-      if (this.f_75802_ != null) {
-         this.f_75802_.m_6460_(p_75812_, p_75813_);
-      }
-
-      if (this.f_75803_ != null) {
-         this.f_75803_.m_6460_(p_75812_, p_75813_);
-      }
 
    }
 
    public LayerLightEventListener m_75814_(LightLayer p_75815_) {
-      if (p_75815_ == LightLayer.BLOCK) {
-         return (LayerLightEventListener)(this.f_75802_ == null ? LayerLightEventListener.DummyLightLayerEventListener.INSTANCE : this.f_75802_);
-      } else {
-         return (LayerLightEventListener)(this.f_75803_ == null ? LayerLightEventListener.DummyLightLayerEventListener.INSTANCE : this.f_75803_);
-      }
+      return p_75815_ == LightLayer.BLOCK ? this.lightEngine.getBlockReader() : this.lightEngine.getSkyReader();
    }
 
    public String m_75816_(LightLayer p_75817_, SectionPos p_75818_) {
       if (p_75817_ == LightLayer.BLOCK) {
          if (this.f_75802_ != null) {
-            return this.f_75802_.m_6647_(p_75818_.m_123252_());
+            return this.f_75802_.getDebugData(p_75818_);
          }
       } else if (this.f_75803_ != null) {
-         return this.f_75803_.m_6647_(p_75818_.m_123252_());
+         return this.f_75803_.getDebugData(p_75818_);
       }
 
       return "n/a";
    }
 
    public void m_5687_(LightLayer p_75819_, SectionPos p_75820_, @Nullable DataLayer p_75821_, boolean p_75822_) {
-      if (p_75819_ == LightLayer.BLOCK) {
-         if (this.f_75802_ != null) {
-            this.f_75802_.m_75660_(p_75820_.m_123252_(), p_75821_, p_75822_);
-         }
-      } else if (this.f_75803_ != null) {
-         this.f_75803_.m_75660_(p_75820_.m_123252_(), p_75821_, p_75822_);
-      }
 
    }
 
    public void m_6462_(ChunkPos p_75829_, boolean p_75830_) {
-      if (this.f_75802_ != null) {
-         this.f_75802_.m_75699_(p_75829_, p_75830_);
-      }
-
-      if (this.f_75803_ != null) {
-         this.f_75803_.m_75699_(p_75829_, p_75830_);
-      }
+      // not used by new light impl
 
    }
 
    public int m_75831_(BlockPos p_75832_, int p_75833_) {
-      int i = this.f_75803_ == null ? 0 : this.f_75803_.m_7768_(p_75832_) - p_75833_;
-      int j = this.f_75802_ == null ? 0 : this.f_75802_.m_7768_(p_75832_);
-      return Math.max(j, i);
-   }
-
-   public int m_164446_() {
-      return this.f_164445_.m_151559_() + 2;
-   }
-
-   public int m_164447_() {
-      return this.f_164445_.m_151560_() - 1;
-   }
-
-   public int m_164448_() {
-      return this.m_164447_() + this.m_164446_();
+      // need to use new light hooks for this
+      return this.lightEngine.getRawBrightness(p_75832_, p_75833_);
+   }
+
+   public long getLightSectionCount() {
+      return this.f_164445_.getSectionsCount() + 2;
+   }
+
+   public long getMinLightSection() {
+      return this.f_164445_.getMinSection() - 1;
+   }
+
+   public long getMaxLightSection() {
+      return this.getMinLightSection() + this.getLightSectionCount();
    }
 }
