--- a/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -77,7 +_,7 @@
    public static final String f_223447_ = "SkyLight";
 
    public static ProtoChunk m_188230_(ServerLevel p_188231_, PoiManager p_188232_, ChunkPos p_188233_, CompoundTag p_188234_) {
-      ChunkPos chunkpos = new ChunkPos(p_188234_.m_128451_("xPos"), p_188234_.m_128451_("zPos"));
+      ChunkPos chunkpos = new ChunkPos(p_188234_.m_128454_("xPos"), p_188234_.m_128454_("zPos"));
       if (!Objects.equals(p_188233_, chunkpos)) {
          f_63449_.error("Chunk file at {} is in the wrong location; relocating. (Expected {}, got {})", p_188233_, p_188233_, chunkpos);
       }
@@ -85,8 +_,8 @@
       UpgradeData upgradedata = p_188234_.m_128425_("UpgradeData", 10) ? new UpgradeData(p_188234_.m_128469_("UpgradeData"), p_188231_) : UpgradeData.f_63320_;
       boolean flag = p_188234_.m_128471_("isLightOn");
       ListTag listtag = p_188234_.m_128437_("sections", 10);
-      int i = p_188231_.m_151559_();
-      LevelChunkSection[] alevelchunksection = new LevelChunkSection[i];
+      long i = p_188231_.m_151559_();
+      LevelChunkSection[] alevelchunksection = new LevelChunkSection[(int) i];
       boolean flag1 = p_188231_.m_6042_().f_223549_();
       ChunkSource chunksource = p_188231_.m_7726_();
       LevelLightEngine levellightengine = chunksource.m_7827_();
@@ -97,7 +_,7 @@
       for(int j = 0; j < listtag.size(); ++j) {
          CompoundTag compoundtag = listtag.m_128728_(j);
          int k = compoundtag.m_128445_("Y");
-         int l = p_188231_.m_151566_(k);
+         long l = p_188231_.getSectionIndexFromSectionY(k);
          if (l >= 0 && l < alevelchunksection.length) {
             PalettedContainer<BlockState> palettedcontainer;
             if (compoundtag.m_128425_("block_states", 10)) {
@@ -118,8 +_,8 @@
             }
 
             LevelChunkSection levelchunksection = new LevelChunkSection(palettedcontainer, palettedcontainerro);
-            alevelchunksection[l] = levelchunksection;
-            SectionPos sectionpos = SectionPos.m_123196_(p_188233_, k);
+            SectionPos sectionpos = SectionPos.of(p_188233_, k);
+            alevelchunksection[(int) l] = levelchunksection;
             p_188232_.m_280570_(sectionpos, levelchunksection);
          }
 
@@ -132,11 +_,11 @@
             }
 
             if (flag3) {
-               levellightengine.m_284126_(LightLayer.BLOCK, SectionPos.m_123196_(p_188233_, k), new DataLayer(compoundtag.m_128463_("BlockLight")));
+               levellightengine.m_284126_(LightLayer.BLOCK, SectionPos.of(p_188233_, k), new DataLayer(compoundtag.m_128463_("BlockLight")));
             }
 
             if (flag4) {
-               levellightengine.m_284126_(LightLayer.SKY, SectionPos.m_123196_(p_188233_, k), new DataLayer(compoundtag.m_128463_("SkyLight")));
+               levellightengine.m_284126_(LightLayer.SKY, SectionPos.of(p_188233_, k), new DataLayer(compoundtag.m_128463_("SkyLight")));
             }
          }
       }
@@ -232,7 +_,7 @@
 
          for(String s1 : compoundtag4.m_128431_()) {
             GenerationStep.Carving generationstep$carving = GenerationStep.Carving.valueOf(s1);
-            protochunk1.m_188186_(generationstep$carving, new CarvingMask(compoundtag4.m_128467_(s1), chunkaccess.m_141937_()));
+            protochunk1.m_188186_(generationstep$carving, new CarvingMask(compoundtag4.m_128467_(s1), chunkaccess.getMinBuildHeight()));
          }
 
          return protochunk1;
@@ -240,7 +_,7 @@
    }
 
    private static void m_188239_(ChunkPos p_188240_, int p_188241_, String p_188242_) {
-      f_63449_.error("Recoverable errors when loading section [" + p_188240_.f_45578_ + ", " + p_188241_ + ", " + p_188240_.f_45579_ + "]: " + p_188242_);
+      f_63449_.error("Recoverable errors when loading section [" + p_188240_.x() + ", " + p_188241_ + ", " + p_188240_.z() + "]: " + p_188242_);
    }
 
    private static Codec<PalettedContainerRO<Holder<Biome>>> m_188260_(Registry<Biome> p_188261_) {
@@ -250,9 +_,9 @@
    public static CompoundTag m_63454_(ServerLevel p_63455_, ChunkAccess p_63456_) {
       ChunkPos chunkpos = p_63456_.m_7697_();
       CompoundTag compoundtag = NbtUtils.m_264171_(new CompoundTag());
-      compoundtag.m_128405_("xPos", chunkpos.f_45578_);
-      compoundtag.m_128405_("yPos", p_63456_.m_151560_());
-      compoundtag.m_128405_("zPos", chunkpos.f_45579_);
+      compoundtag.m_128356_("xPos", chunkpos.x());
+      compoundtag.m_128356_("yPos", p_63456_.getMinSection());
+      compoundtag.m_128356_("zPos", chunkpos.z());
       compoundtag.m_128356_("LastUpdate", p_63455_.m_46467_());
       compoundtag.m_128356_("InhabitedTime", p_63456_.m_6319_());
       compoundtag.m_128359_("Status", BuiltInRegistries.f_256940_.m_7981_(p_63456_.m_6415_()).toString());
@@ -282,15 +_,15 @@
       Codec<PalettedContainerRO<Holder<Biome>>> codec = m_188260_(registry);
       boolean flag = p_63456_.m_6332_();
 
-      for(int i = levellightengine.m_164447_(); i < levellightengine.m_164448_(); ++i) {
-         int j = p_63456_.m_151566_(i);
+      for(long i = levellightengine.getMinLightSection(); i < levellightengine.getMaxLightSection(); ++i) {
+         long j = p_63456_.getSectionIndexFromSectionY(i);
          boolean flag1 = j >= 0 && j < alevelchunksection.length;
-         DataLayer datalayer = levellightengine.m_75814_(LightLayer.BLOCK).m_8079_(SectionPos.m_123196_(chunkpos, i));
-         DataLayer datalayer1 = levellightengine.m_75814_(LightLayer.SKY).m_8079_(SectionPos.m_123196_(chunkpos, i));
+         DataLayer datalayer = levellightengine.m_75814_(LightLayer.BLOCK).m_8079_(SectionPos.of(chunkpos, i));
+         DataLayer datalayer1 = levellightengine.m_75814_(LightLayer.SKY).m_8079_(SectionPos.of(chunkpos, i));
          if (flag1 || datalayer != null || datalayer1 != null) {
             CompoundTag compoundtag1 = new CompoundTag();
             if (flag1) {
-               LevelChunkSection levelchunksection = alevelchunksection[j];
+               LevelChunkSection levelchunksection = alevelchunksection[(int) j];
                compoundtag1.m_128365_("block_states", f_188227_.encodeStart(NbtOps.f_128958_, levelchunksection.m_63019_()).getOrThrow(false, f_63449_::error));
                compoundtag1.m_128365_("biomes", codec.encodeStart(NbtOps.f_128958_, levelchunksection.m_187996_()).getOrThrow(false, f_63449_::error));
             }
@@ -405,7 +_,7 @@
       return listtag.isEmpty() ? null : listtag;
    }
 
-   private static CompoundTag m_188249_(StructurePieceSerializationContext p_188250_, ChunkPos p_188251_, Map<Structure, StructureStart> p_188252_, Map<Structure, LongSet> p_188253_) {
+   private static CompoundTag m_188249_(StructurePieceSerializationContext p_188250_, ChunkPos p_188251_, Map<Structure, StructureStart> p_188252_, Map<Structure, it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos>> p_188253_) {
       CompoundTag compoundtag = new CompoundTag();
       CompoundTag compoundtag1 = new CompoundTag();
       Registry<Structure> registry = p_188250_.f_192763_().m_175515_(Registries.f_256944_);
@@ -418,10 +_,17 @@
       compoundtag.m_128365_("starts", compoundtag1);
       CompoundTag compoundtag2 = new CompoundTag();
 
-      for(Map.Entry<Structure, LongSet> entry1 : p_188253_.entrySet()) {
+      for(Map.Entry<Structure, it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos>> entry1 : p_188253_.entrySet()) {
          if (!entry1.getValue().isEmpty()) {
             ResourceLocation resourcelocation1 = registry.m_7981_(entry1.getKey());
-            compoundtag2.m_128365_(resourcelocation1.toString(), new LongArrayTag(entry1.getValue()));
+            net.minecraft.nbt.ListTag chunks = new net.minecraft.nbt.ListTag();
+            entry1.getValue().forEach(chunkPos -> {
+               CompoundTag chunk = new CompoundTag();
+               chunk.m_128356_("x", chunkPos.x());
+               chunk.m_128356_("z", chunkPos.z());
+               chunks.add(chunk);
+            });
+            compoundtag2.m_128365_(resourcelocation1.toString(), chunks);
          }
       }
 
@@ -450,8 +_,8 @@
       return map;
    }
 
-   private static Map<Structure, LongSet> m_208154_(RegistryAccess p_208155_, ChunkPos p_208156_, CompoundTag p_208157_) {
-      Map<Structure, LongSet> map = Maps.newHashMap();
+   private static Map<Structure, it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos>> m_208154_(RegistryAccess p_208155_, ChunkPos p_208156_, CompoundTag p_208157_) {
+      Map<Structure, it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos>> map = Maps.newHashMap();
       Registry<Structure> registry = p_208155_.m_175515_(Registries.f_256944_);
       CompoundTag compoundtag = p_208157_.m_128469_("References");
 
@@ -461,17 +_,18 @@
          if (structure == null) {
             f_63449_.warn("Found reference to unknown structure '{}' in chunk {}, discarding", resourcelocation, p_208156_);
          } else {
-            long[] along = compoundtag.m_128467_(s);
-            if (along.length != 0) {
-               map.put(structure, new LongOpenHashSet(Arrays.stream(along).filter((p_208153_) -> {
-                  ChunkPos chunkpos = new ChunkPos(p_208153_);
-                  if (chunkpos.m_45594_(p_208156_) > 8) {
+            net.minecraft.nbt.ListTag along = compoundtag.m_128437_(s, 7);
+            if (along.size() != 0) {
+               it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos> chunks = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>();
+               along.forEach((p_208153_) -> {
+                  ChunkPos chunkpos = new ChunkPos(((CompoundTag) p_208153_).m_128454_("x"), ((CompoundTag) p_208153_).m_128454_("z"));
+                  if (chunkpos.getChessboardDistance(p_208156_) > 8) {
                      f_63449_.warn("Found invalid structure reference [ {} @ {} ] for chunk {}.", resourcelocation, chunkpos, p_208156_);
-                     return false;
                   } else {
-                     return true;
+                     chunks.add(chunkpos);
                   }
-               }).toArray()));
+               });
+               map.put(structure, chunks);
             }
          }
       }
