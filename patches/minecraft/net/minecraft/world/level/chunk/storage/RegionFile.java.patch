--- a/net/minecraft/world/level/chunk/storage/RegionFile.java
+++ b/net/minecraft/world/level/chunk/storage/RegionFile.java
@@ -36,7 +_,7 @@
    private final Path f_63622_;
    final RegionFileVersion f_63623_;
    private final ByteBuffer f_63624_ = ByteBuffer.allocateDirect(8192);
-   private final IntBuffer f_63625_;
+   private final java.nio.LongBuffer f_63625_;
    private final IntBuffer f_63626_;
    @VisibleForTesting
    protected final RegionBitmap f_63618_ = new RegionBitmap();
@@ -51,7 +_,7 @@
          throw new IllegalArgumentException("Expected directory, got " + p_63634_.toAbsolutePath());
       } else {
          this.f_63622_ = p_63634_;
-         this.f_63625_ = this.f_63624_.asIntBuffer();
+         this.f_63625_ = this.f_63624_.asLongBuffer();
          this.f_63625_.limit(1024);
          this.f_63624_.position(4096);
          this.f_63626_ = this.f_63624_.asIntBuffer();
@@ -61,7 +_,7 @@
             this.f_63621_ = FileChannel.open(p_63633_, StandardOpenOption.CREATE, StandardOpenOption.READ, StandardOpenOption.WRITE);
          }
 
-         this.f_63618_.m_63612_(0, 2);
+         this.f_63618_.force(0, 2);
          this.f_63624_.position(0);
          int i = this.f_63621_.read(this.f_63624_, 0L);
          if (i != -1) {
@@ -72,10 +_,10 @@
             long j = Files.size(p_63633_);
 
             for(int k = 0; k < 1024; ++k) {
-               int l = this.f_63625_.get(k);
+               long l = this.f_63625_.get(k);
                if (l != 0) {
-                  int i1 = m_63671_(l);
-                  int j1 = m_63640_(l);
+                  long i1 = getSectorNumber(l);
+                  long j1 = getNumSectors(l);
                   if (i1 < 2) {
                      f_63619_.warn("Region file {} has invalid sector at index: {}; sector {} overlaps with header", p_63633_, k, i1);
                      this.f_63625_.put(k, 0);
@@ -86,7 +_,7 @@
                      f_63619_.warn("Region file {} has an invalid sector at index: {}; sector {} is out of bounds", p_63633_, k, i1);
                      this.f_63625_.put(k, 0);
                   } else {
-                     this.f_63618_.m_63612_(i1, j1);
+                     this.f_63618_.force(i1, j1);
                   }
                }
             }
@@ -102,14 +_,14 @@
 
    @Nullable
    public synchronized DataInputStream m_63645_(ChunkPos p_63646_) throws IOException {
-      int i = this.m_63686_(p_63646_);
+      long i = this.getOffset(p_63646_);
       if (i == 0) {
          return null;
       } else {
-         int j = m_63671_(i);
-         int k = m_63640_(i);
-         int l = k * 4096;
-         ByteBuffer bytebuffer = ByteBuffer.allocate(l);
+         long j = getSectorNumber(i);
+         long k = getNumSectors(i);
+         long l = k * 4096;
+         ByteBuffer bytebuffer = ByteBuffer.allocate((int) l); // Todo Long Region
          this.f_63621_.read(bytebuffer, (long)(j * 4096));
          bytebuffer.flip();
          if (bytebuffer.remaining() < 5) {
@@ -185,11 +_,11 @@
       return p_63643_ << 8 | p_63644_;
    }
 
-   private static int m_63640_(int p_63641_) {
+   private static long getNumSectors(long p_63641_) {
       return p_63641_ & 255;
    }
 
-   private static int m_63671_(int p_63672_) {
+   private static long getSectorNumber(long p_63672_) {
       return p_63672_ >> 8 & 16777215;
    }
 
@@ -198,12 +_,12 @@
    }
 
    public boolean m_63673_(ChunkPos p_63674_) {
-      int i = this.m_63686_(p_63674_);
+      long i = this.getOffset(p_63674_);
       if (i == 0) {
          return false;
       } else {
-         int j = m_63671_(i);
-         int k = m_63640_(i);
+         long j = getSectorNumber(i);
+         long k = getNumSectors(i);
          ByteBuffer bytebuffer = ByteBuffer.allocate(5);
 
          try {
@@ -254,22 +_,22 @@
    }
 
    public void m_156613_(ChunkPos p_156614_) throws IOException {
-      int i = m_63688_(p_156614_);
-      int j = this.f_63625_.get(i);
+      long i = getOffsetIndex(p_156614_);
+      long j = this.f_63625_.get((int) i);
       if (j != 0) {
-         this.f_63625_.put(i, 0);
-         this.f_63626_.put(i, m_156612_());
+         this.f_63625_.put((int) i, 0);
+         this.f_63626_.put((int) i, m_156612_());
          this.m_63675_();
          Files.deleteIfExists(this.m_63684_(p_156614_));
-         this.f_63618_.m_63615_(m_63671_(j), m_63640_(j));
+         this.f_63618_.m_63615_((int) getSectorNumber(j), (int) getNumSectors(j));
       }
    }
 
    protected synchronized void m_63654_(ChunkPos p_63655_, ByteBuffer p_63656_) throws IOException {
-      int i = m_63688_(p_63655_);
-      int j = this.f_63625_.get(i);
-      int k = m_63671_(j);
-      int l = m_63640_(j);
+      long i = getOffsetIndex(p_63655_);
+      long j = this.f_63625_.get((int) i);
+      long k = getSectorNumber(j);
+      long l = getNumSectors(j);
       int i1 = p_63656_.remaining();
       int j1 = m_63676_(i1);
       int k1;
@@ -290,12 +_,12 @@
          this.f_63621_.write(p_63656_, (long)(k1 * 4096));
       }
 
-      this.f_63625_.put(i, this.m_63642_(k1, j1));
-      this.f_63626_.put(i, m_156612_());
+      this.f_63625_.put((int) i, this.m_63642_(k1, j1));
+      this.f_63626_.put((int) i, m_156612_());
       this.m_63675_();
       regionfile$commitop.m_63698_();
       if (k != 0) {
-         this.f_63618_.m_63615_(k, l);
+         this.f_63618_.m_63615_((int) k, (int) l);
       }
 
    }
@@ -341,16 +_,16 @@
       this.f_63621_.write(this.f_63624_, 0L);
    }
 
-   private int m_63686_(ChunkPos p_63687_) {
-      return this.f_63625_.get(m_63688_(p_63687_));
+   private long getOffset(ChunkPos p_63687_) {
+      return this.f_63625_.get((int) getOffsetIndex(p_63687_));
    }
 
    public boolean m_63682_(ChunkPos p_63683_) {
-      return this.m_63686_(p_63683_) != 0;
+      return this.getOffset(p_63683_) != 0;
    }
 
-   private static int m_63688_(ChunkPos p_63689_) {
-      return p_63689_.m_45613_() + p_63689_.m_45614_() * 32;
+   private static long getOffsetIndex(ChunkPos p_63689_) {
+      return p_63689_.getRegionLocalX() + p_63689_.getRegionLocalZ() * 32;
    }
 
    public void close() throws IOException {
