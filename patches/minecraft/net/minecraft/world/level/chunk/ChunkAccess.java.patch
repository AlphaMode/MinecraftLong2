--- a/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -50,14 +_,23 @@
 import net.minecraft.world.ticks.TickContainerAccess;
 import org.slf4j.Logger;
 
-public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiomeSource, StructureAccess {
+public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiomeSource, StructureAccess, ca.spottedleaf.starlight.common.chunk.ExtendedChunk {
    private static final Logger f_187613_ = LogUtils.getLogger();
-   private static final LongSet f_207932_ = new LongOpenHashSet();
+   private static final it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos> f_207932_ = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>();
    protected final ShortList[] f_187602_;
    protected volatile boolean f_187603_;
    private volatile boolean f_187614_;
    protected final ChunkPos f_187604_;
    private long f_187615_;
+
+   private volatile ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] blockNibbles;
+
+   private volatile ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] skyNibbles;
+
+   private volatile boolean[] skyEmptinessMap;
+
+   private volatile boolean[] blockEmptinessMap;
+
    /** @deprecated */
    @Nullable
    @Deprecated
@@ -69,7 +_,7 @@
    protected BlendingData f_187607_;
    protected final Map<Heightmap.Types, Heightmap> f_187608_ = Maps.newEnumMap(Heightmap.Types.class);
    private final Map<Structure, StructureStart> f_187617_ = Maps.newHashMap();
-   private final Map<Structure, LongSet> f_187618_ = Maps.newHashMap();
+   private final Map<Structure, it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos>> f_187618_ = Maps.newHashMap();
    protected final Map<BlockPos, CompoundTag> f_187609_ = Maps.newHashMap();
    protected final Map<BlockPos, BlockEntity> f_187610_ = Maps.newHashMap();
    protected final LevelHeightAccessor f_187611_;
@@ -79,9 +_,9 @@
       this.f_187604_ = p_187621_;
       this.f_187606_ = p_187622_;
       this.f_187611_ = p_187623_;
-      this.f_187612_ = new LevelChunkSection[p_187623_.m_151559_()];
+      this.f_187612_ = new LevelChunkSection[(int) p_187623_.getSectionsCount()]; // TODO: long support
       this.f_187615_ = p_187625_;
-      this.f_187602_ = new ShortList[p_187623_.m_151559_()];
+      this.f_187602_ = new ShortList[(int) p_187623_.getSectionsCount()];
       this.f_187607_ = p_187627_;
       if (p_187626_ != null) {
          if (this.f_187612_.length == p_187626_.length) {
@@ -97,13 +_,13 @@
    private static void m_187634_(LevelHeightAccessor p_187635_, Registry<Biome> p_187636_, LevelChunkSection[] p_187637_) {
       for(int i = 0; i < p_187637_.length; ++i) {
          if (p_187637_[i] == null) {
-            p_187637_[i] = new LevelChunkSection(p_187635_.m_151568_(i), p_187636_);
+            p_187637_[i] = new LevelChunkSection(p_187635_.getSectionYFromSectionIndex(i), p_187636_);
          }
       }
 
    }
 
-   public GameEventListenerRegistry m_246686_(int p_251437_) {
+   public GameEventListenerRegistry getListenerRegistry(long p_251437_) {
       return GameEventListenerRegistry.f_244154_;
    }
 
@@ -128,9 +_,9 @@
       return null;
    }
 
-   public int m_62098_() {
+   public long getHighestSectionPosition() {
       LevelChunkSection levelchunksection = this.m_62074_();
-      return levelchunksection == null ? this.m_141937_() : levelchunksection.m_63017_();
+      return levelchunksection == null ? this.getMinBuildHeight() : levelchunksection.bottomBlockY();
    }
 
    public Set<BlockPos> m_5928_() {
@@ -143,8 +_,8 @@
       return this.f_187612_;
    }
 
-   public LevelChunkSection m_183278_(int p_187657_) {
-      return this.m_7103_()[p_187657_];
+   public LevelChunkSection getSection(long p_187657_) {
+      return this.m_7103_()[(int) p_187657_]; // TODO: long support
    }
 
    public Collection<Map.Entry<Heightmap.Types, Heightmap>> m_6890_() {
@@ -165,7 +_,7 @@
       return this.f_187608_.get(p_187659_) != null;
    }
 
-   public int m_5885_(Heightmap.Types p_62080_, int p_62081_, int p_62082_) {
+   public long getHeight(Heightmap.Types p_62080_, long p_62081_, long p_62082_) {
       Heightmap heightmap = this.f_187608_.get(p_62080_);
       if (heightmap == null) {
          if (SharedConstants.f_136183_ && this instanceof LevelChunk) {
@@ -176,7 +_,7 @@
          heightmap = this.f_187608_.get(p_62080_);
       }
 
-      return heightmap.m_64242_(p_62081_ & 15, p_62082_ & 15) - 1;
+      return heightmap.getFirstAvailable(p_62081_ & 15, p_62082_ & 15) - 1;
    }
 
    public ChunkPos m_7697_() {
@@ -203,38 +_,38 @@
       this.f_187603_ = true;
    }
 
-   public LongSet m_213649_(Structure p_223017_) {
+   public it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos> getReferencesForStructure(Structure p_223017_) {
       return this.f_187618_.getOrDefault(p_223017_, f_207932_);
    }
 
-   public void m_213843_(Structure p_223007_, long p_223008_) {
+   public void addReferenceForStructure(Structure p_223007_, ChunkPos p_223008_) {
       this.f_187618_.computeIfAbsent(p_223007_, (p_223019_) -> {
-         return new LongOpenHashSet();
+         return new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>();
       }).add(p_223008_);
       this.f_187603_ = true;
    }
 
-   public Map<Structure, LongSet> m_62769_() {
+   public Map<Structure, it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos>> m_62769_() {
       return Collections.unmodifiableMap(this.f_187618_);
    }
 
-   public void m_62737_(Map<Structure, LongSet> p_187663_) {
+   public void m_62737_(Map<Structure, it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos>> p_187663_) {
       this.f_187618_.clear();
       this.f_187618_.putAll(p_187663_);
       this.f_187603_ = true;
    }
 
-   public boolean m_5566_(int p_62075_, int p_62076_) {
-      if (p_62075_ < this.m_141937_()) {
-         p_62075_ = this.m_141937_();
-      }
-
-      if (p_62076_ >= this.m_151558_()) {
-         p_62076_ = this.m_151558_() - 1;
-      }
-
-      for(int i = p_62075_; i <= p_62076_; i += 16) {
-         if (!this.m_183278_(this.m_151564_(i)).m_188008_()) {
+   public boolean isYSpaceEmpty(long p_62075_, long p_62076_) {
+      if (p_62075_ < this.getMinBuildHeight()) {
+         p_62075_ = this.getMinBuildHeight();
+      }
+
+      if (p_62076_ >= this.getMaxBuildHeight()) {
+         p_62076_ = this.getMaxBuildHeight() - 1;
+      }
+
+      for(long i = p_62075_; i <= p_62076_; i += 16) {
+         if (!this.getSection(this.getSectionIndex(i)).m_188008_()) {
             return false;
          }
       }
@@ -263,7 +_,7 @@
    }
 
    public void m_6561_(short p_62092_, int p_62093_) {
-      m_62095_(this.m_6720_(), p_62093_).add(p_62092_);
+      getOrCreateOffsetList(this.m_6720_(), p_62093_).add(p_62092_);
    }
 
    public void m_5604_(CompoundTag p_62091_) {
@@ -315,12 +_,12 @@
       this.f_187615_ = p_62099_;
    }
 
-   public static ShortList m_62095_(ShortList[] p_62096_, int p_62097_) {
-      if (p_62096_[p_62097_] == null) {
-         p_62096_[p_62097_] = new ShortArrayList();
+   public static ShortList getOrCreateOffsetList(ShortList[] p_62096_, long p_62097_) {
+      if (p_62096_[(int) p_62097_] == null) { // TODO: long support
+         p_62096_[(int) p_62097_] = new ShortArrayList();
       }
 
-      return p_62096_[p_62097_];
+      return p_62096_[(int) p_62097_];
    }
 
    public boolean m_6332_() {
@@ -332,12 +_,12 @@
       this.m_8092_(true);
    }
 
-   public int m_141937_() {
-      return this.f_187611_.m_141937_();
+   public long getMinBuildHeight() {
+      return this.f_187611_.getMinBuildHeight();
    }
 
-   public int m_141928_() {
-      return this.f_187611_.m_141928_();
+   public long getHeight() {
+      return this.f_187611_.getHeight();
    }
 
    public NoiseChunk m_223012_(Function<ChunkAccess, NoiseChunk> p_223013_) {
@@ -358,18 +_,18 @@
       return this.f_223003_;
    }
 
-   public Holder<Biome> m_203495_(int p_204347_, int p_204348_, int p_204349_) {
+   public Holder<Biome> getNoiseBiome(long p_204347_, long p_204348_, long p_204349_) {
       try {
-         int i = QuartPos.m_175400_(this.m_141937_());
-         int k = i + QuartPos.m_175400_(this.m_141928_()) - 1;
-         int l = Mth.m_14045_(p_204348_, i, k);
-         int j = this.m_151564_(QuartPos.m_175402_(l));
-         return this.f_187612_[j].m_204433_(p_204347_ & 3, l & 3, p_204349_ & 3);
+         long i = QuartPos.fromBlock(this.getMinBuildHeight());
+         long k = i + QuartPos.fromBlock(this.getHeight()) - 1;
+         long l = Mth.clamp(p_204348_, i, k);
+         long j = this.getSectionIndex(QuartPos.toBlock(l));
+         return this.f_187612_[(int) j].getNoiseBiome(p_204347_ & 3, l & 3, p_204349_ & 3);
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.m_127521_(throwable, "Getting biome");
          CrashReportCategory crashreportcategory = crashreport.m_127514_("Biome being got");
          crashreportcategory.m_128165_("Location", () -> {
-            return CrashReportCategory.m_178942_(this, p_204347_, p_204348_, p_204349_);
+            return CrashReportCategory.formatLocation(this, p_204347_, p_204348_, p_204349_);
          });
          throw new ReportedException(crashreport);
       }
@@ -377,13 +_,13 @@
 
    public void m_183442_(BiomeResolver p_187638_, Climate.Sampler p_187639_) {
       ChunkPos chunkpos = this.m_7697_();
-      int i = QuartPos.m_175400_(chunkpos.m_45604_());
-      int j = QuartPos.m_175400_(chunkpos.m_45605_());
+      long i = QuartPos.fromBlock(chunkpos.getMinBlockX());
+      long j = QuartPos.fromBlock(chunkpos.getMinBlockZ());
       LevelHeightAccessor levelheightaccessor = this.m_183618_();
 
-      for(int k = levelheightaccessor.m_151560_(); k < levelheightaccessor.m_151561_(); ++k) {
-         LevelChunkSection levelchunksection = this.m_183278_(this.m_151566_(k));
-         levelchunksection.m_188003_(p_187638_, p_187639_, i, j);
+      for(long k = levelheightaccessor.getMinSection(); k < levelheightaccessor.getMaxSection(); ++k) {
+         LevelChunkSection levelchunksection = this.getSection(this.getSectionIndexFromSectionY(k));
+         levelchunksection.fillBiomesFromNoise(p_187638_, p_187639_, i, j);
       }
 
    }
@@ -403,6 +_,38 @@
 
    public LevelHeightAccessor m_183618_() {
       return this;
+   }
+
+   public ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] getBlockNibbles() {
+      return this.blockNibbles;
+   }
+
+   public void setBlockNibbles(final ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] nibbles) {
+      this.blockNibbles = nibbles;
+   }
+
+   public ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] getSkyNibbles() {
+      return this.skyNibbles;
+   }
+
+   public void setSkyNibbles(final ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] nibbles) {
+      this.skyNibbles = nibbles;
+   }
+
+   public boolean[] getSkyEmptinessMap() {
+      return this.skyEmptinessMap;
+   }
+
+   public void setSkyEmptinessMap(final boolean[] emptinessMap) {
+      this.skyEmptinessMap = emptinessMap;
+   }
+
+   public boolean[] getBlockEmptinessMap() {
+      return this.blockEmptinessMap;
+   }
+
+   public void setBlockEmptinessMap(final boolean[] emptinessMap) {
+      this.blockEmptinessMap = emptinessMap;
    }
 
    public static record TicksToSave(SerializableTickContainer<Block> f_187680_, SerializableTickContainer<Fluid> f_187681_) {
