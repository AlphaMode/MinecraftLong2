--- a/net/minecraft/world/level/biome/BiomeManager.java
+++ b/net/minecraft/world/level/biome/BiomeManager.java
@@ -8,7 +_,7 @@
 import net.minecraft.util.Mth;
 
 public class BiomeManager {
-   public static final int f_151750_ = QuartPos.m_175400_(8);
+   public static final long f_151750_ = QuartPos.fromBlock(8);
    private static final int f_186673_ = 2;
    private static final int f_186674_ = 4;
    private static final int f_186675_ = 3;
@@ -29,72 +_,72 @@
    }
 
    public Holder<Biome> m_204214_(BlockPos p_204215_) {
-      int i = p_204215_.m_123341_() - 2;
-      int j = p_204215_.m_123342_() - 2;
-      int k = p_204215_.m_123343_() - 2;
-      int l = i >> 2;
-      int i1 = j >> 2;
-      int j1 = k >> 2;
-      double d0 = (double)(i & 3) / 4.0D;
-      double d1 = (double)(j & 3) / 4.0D;
-      double d2 = (double)(k & 3) / 4.0D;
+      me.alphamode.mclong.math.BigInteger i = p_204215_.getBigX().subtract(me.alphamode.mclong.core.BigConstants.Ints.TWO);
+      me.alphamode.mclong.math.BigInteger j = p_204215_.getBigY().subtract(me.alphamode.mclong.core.BigConstants.Ints.TWO);
+      me.alphamode.mclong.math.BigInteger k = p_204215_.getBigZ().subtract(me.alphamode.mclong.core.BigConstants.Ints.TWO);
+      me.alphamode.mclong.math.BigInteger l = i.shiftRight(2);
+      me.alphamode.mclong.math.BigInteger i1 = j.shiftRight(2);
+      me.alphamode.mclong.math.BigInteger j1 = k.shiftRight(2);
+      me.alphamode.mclong.math.BigDecimal d0 = (i.and(me.alphamode.mclong.core.BigConstants.Ints.THREE)).toBigDecimal().divide(me.alphamode.mclong.core.BigConstants.FOUR);
+      me.alphamode.mclong.math.BigDecimal d1 = (j.and(me.alphamode.mclong.core.BigConstants.Ints.THREE)).toBigDecimal().divide(me.alphamode.mclong.core.BigConstants.FOUR);
+      me.alphamode.mclong.math.BigDecimal d2 = (k.and(me.alphamode.mclong.core.BigConstants.Ints.THREE)).toBigDecimal().divide(me.alphamode.mclong.core.BigConstants.FOUR);
       int k1 = 0;
-      double d3 = Double.POSITIVE_INFINITY;
+      me.alphamode.mclong.math.BigDecimal d3 = me.alphamode.mclong.math.BigDecimal.MAX_VALUE;
 
       for(int l1 = 0; l1 < 8; ++l1) {
          boolean flag = (l1 & 4) == 0;
          boolean flag1 = (l1 & 2) == 0;
          boolean flag2 = (l1 & 1) == 0;
-         int i2 = flag ? l : l + 1;
-         int j2 = flag1 ? i1 : i1 + 1;
-         int k2 = flag2 ? j1 : j1 + 1;
-         double d4 = flag ? d0 : d0 - 1.0D;
-         double d5 = flag1 ? d1 : d1 - 1.0D;
-         double d6 = flag2 ? d2 : d2 - 1.0D;
-         double d7 = m_186679_(this.f_47863_, i2, j2, k2, d4, d5, d6);
-         if (d3 > d7) {
+         me.alphamode.mclong.math.BigInteger i2 = flag ? l : l.add();
+         me.alphamode.mclong.math.BigInteger j2 = flag1 ? i1 : i1.add();
+         me.alphamode.mclong.math.BigInteger k2 = flag2 ? j1 : j1.add();
+         me.alphamode.mclong.math.BigDecimal d4 = flag ? d0 : d0.subtract(me.alphamode.mclong.math.BigDecimal.ONE);
+         me.alphamode.mclong.math.BigDecimal d5 = flag1 ? d1 : d1.subtract(me.alphamode.mclong.math.BigDecimal.ONE);
+         me.alphamode.mclong.math.BigDecimal d6 = flag2 ? d2 : d2.subtract(me.alphamode.mclong.math.BigDecimal.ONE);
+         me.alphamode.mclong.math.BigDecimal d7 = getFiddledDistance(this.f_47863_, i2.longValue(), j2.longValue(), k2.longValue(), d4, d5, d6);
+         if (d3.compareTo(d7) > 0) {
             k1 = l1;
             d3 = d7;
          }
       }
 
-      int l2 = (k1 & 4) == 0 ? l : l + 1;
-      int i3 = (k1 & 2) == 0 ? i1 : i1 + 1;
-      int j3 = (k1 & 1) == 0 ? j1 : j1 + 1;
-      return this.f_47862_.m_203495_(l2, i3, j3);
+      me.alphamode.mclong.math.BigInteger l2 = (k1 & 4) == 0 ? l : l.add();
+      me.alphamode.mclong.math.BigInteger i3 = (k1 & 2) == 0 ? i1 : i1.add();
+      me.alphamode.mclong.math.BigInteger j3 = (k1 & 1) == 0 ? j1 : j1.add();
+      return this.f_47862_.getNoiseBiome(l2, i3, j3);
    }
 
-   public Holder<Biome> m_204206_(double p_204207_, double p_204208_, double p_204209_) {
-      int i = QuartPos.m_175400_(Mth.m_14107_(p_204207_));
-      int j = QuartPos.m_175400_(Mth.m_14107_(p_204208_));
-      int k = QuartPos.m_175400_(Mth.m_14107_(p_204209_));
-      return this.m_204210_(i, j, k);
+   public Holder<Biome> getNoiseBiomeAtPosition(me.alphamode.mclong.math.BigDecimal pX, me.alphamode.mclong.math.BigDecimal pY, me.alphamode.mclong.math.BigDecimal pZ) {
+      me.alphamode.mclong.math.BigInteger i = QuartPos.fromBlock(Mth.lfloor(pX));
+      me.alphamode.mclong.math.BigInteger j = QuartPos.fromBlock(Mth.lfloor(pY));
+      me.alphamode.mclong.math.BigInteger k = QuartPos.fromBlock(Mth.lfloor(pZ));
+      return this.getNoiseBiomeAtQuart(i, j, k);
    }
 
    public Holder<Biome> m_204216_(BlockPos p_204217_) {
-      int i = QuartPos.m_175400_(p_204217_.m_123341_());
-      int j = QuartPos.m_175400_(p_204217_.m_123342_());
-      int k = QuartPos.m_175400_(p_204217_.m_123343_());
-      return this.m_204210_(i, j, k);
-   }
-
-   public Holder<Biome> m_204210_(int p_204211_, int p_204212_, int p_204213_) {
-      return this.f_47862_.m_203495_(p_204211_, p_204212_, p_204213_);
-   }
-
-   private static double m_186679_(long p_186680_, int p_186681_, int p_186682_, int p_186683_, double p_186684_, double p_186685_, double p_186686_) {
-      long $$7 = LinearCongruentialGenerator.m_13972_(p_186680_, (long)p_186681_);
-      $$7 = LinearCongruentialGenerator.m_13972_($$7, (long)p_186682_);
-      $$7 = LinearCongruentialGenerator.m_13972_($$7, (long)p_186683_);
-      $$7 = LinearCongruentialGenerator.m_13972_($$7, (long)p_186681_);
-      $$7 = LinearCongruentialGenerator.m_13972_($$7, (long)p_186682_);
-      $$7 = LinearCongruentialGenerator.m_13972_($$7, (long)p_186683_);
+      me.alphamode.mclong.math.BigInteger i = QuartPos.fromBlock(p_204217_.getBigX());
+      me.alphamode.mclong.math.BigInteger j = QuartPos.fromBlock(p_204217_.getBigY());
+      me.alphamode.mclong.math.BigInteger k = QuartPos.fromBlock(p_204217_.getBigZ());
+      return this.getNoiseBiomeAtQuart(i, j, k);
+   }
+
+   public Holder<Biome> getNoiseBiomeAtQuart(me.alphamode.mclong.math.BigInteger pX, me.alphamode.mclong.math.BigInteger pY, me.alphamode.mclong.math.BigInteger pZ) {
+      return this.f_47862_.getNoiseBiome(pX, pY, pZ);
+   }
+
+   private static me.alphamode.mclong.math.BigDecimal getFiddledDistance(long pSeed, long pX, long pY, long pZ, me.alphamode.mclong.math.BigDecimal pXNoise, me.alphamode.mclong.math.BigDecimal pYNoise, me.alphamode.mclong.math.BigDecimal pZNoise) {
+      long $$7 = LinearCongruentialGenerator.m_13972_(pSeed, pX);
+      $$7 = LinearCongruentialGenerator.m_13972_($$7, pY);
+      $$7 = LinearCongruentialGenerator.m_13972_($$7, pZ);
+      $$7 = LinearCongruentialGenerator.m_13972_($$7, pX);
+      $$7 = LinearCongruentialGenerator.m_13972_($$7, pY);
+      $$7 = LinearCongruentialGenerator.m_13972_($$7, pZ);
       double d0 = m_186689_($$7);
-      $$7 = LinearCongruentialGenerator.m_13972_($$7, p_186680_);
+      $$7 = LinearCongruentialGenerator.m_13972_($$7, pSeed);
       double d1 = m_186689_($$7);
-      $$7 = LinearCongruentialGenerator.m_13972_($$7, p_186680_);
+      $$7 = LinearCongruentialGenerator.m_13972_($$7, pSeed);
       double d2 = m_186689_($$7);
-      return Mth.m_144952_(p_186686_ + d2) + Mth.m_144952_(p_186685_ + d1) + Mth.m_144952_(p_186684_ + d0);
+      return Mth.square(pZNoise.add(d2)).add(Mth.square(pYNoise.add(d1))).add(Mth.square(pXNoise.add(d0)));
    }
 
    private static double m_186689_(long p_186690_) {
@@ -103,6 +_,6 @@
    }
 
    public interface NoiseBiomeSource {
-      Holder<Biome> m_203495_(int p_204218_, int p_204219_, int p_204220_);
+      Holder<Biome> getNoiseBiome(me.alphamode.mclong.math.BigInteger pX, me.alphamode.mclong.math.BigInteger pY, me.alphamode.mclong.math.BigInteger pZ);
    }
 }
