--- a/net/minecraft/world/level/levelgen/feature/TreeFeature.java
+++ b/net/minecraft/world/level/levelgen/feature/TreeFeature.java
@@ -66,9 +_,9 @@
       BlockPos blockpos = p_225264_.f_225455_.map((p_225286_) -> {
          return p_225286_.m_225891_(p_225260_, p_225259_);
       }).orElse(p_225260_);
-      int i1 = Math.min(p_225260_.m_123342_(), blockpos.m_123342_());
-      int j1 = Math.max(p_225260_.m_123342_(), blockpos.m_123342_()) + i + 1;
-      if (i1 >= p_225258_.m_141937_() + 1 && j1 <= p_225258_.m_151558_()) {
+      long i1 = Math.min(p_225260_.getY(), blockpos.getY());
+      long j1 = Math.max(p_225260_.getY(), blockpos.getY()) + i + 1;
+      if (i1 >= p_225258_.getMinBuildHeight() + 1 && j1 <= p_225258_.getMaxBuildHeight()) {
          OptionalInt optionalint = p_225264_.f_68191_.m_68295_();
          int k1 = this.m_67215_(p_225258_, i, blockpos, p_225264_);
          if (k1 >= i || !optionalint.isEmpty() && k1 >= optionalint.getAsInt()) {
@@ -97,7 +_,7 @@
 
          for(int k = -j; k <= j; ++k) {
             for(int l = -j; l <= j; ++l) {
-               blockpos$mutableblockpos.m_122154_(p_67218_, k, i, l);
+               blockpos$mutableblockpos.setWithOffset(p_67218_, k, i, l);
                if (!p_67219_.f_68190_.m_226184_(p_67216_, blockpos$mutableblockpos) || !p_67219_.f_68193_ && m_67277_(p_67216_, blockpos$mutableblockpos)) {
                   return i - 2;
                }
@@ -154,7 +_,7 @@
 
          return BoundingBox.m_162378_(Iterables.concat(set, set1, set2, set3)).map((p_225270_) -> {
             DiscreteVoxelShape discretevoxelshape = m_225251_(worldgenlevel, p_225270_, set1, set3, set);
-            StructureTemplate.m_74510_(worldgenlevel, 3, discretevoxelshape, p_225270_.m_162395_(), p_225270_.m_162396_(), p_225270_.m_162398_());
+            StructureTemplate.updateShapeAtEdge(worldgenlevel, 3, discretevoxelshape, p_225270_.minX(), p_225270_.minY(), p_225270_.minZ());
             return true;
          }).orElse(false);
       } else {
@@ -163,7 +_,7 @@
    }
 
    private static DiscreteVoxelShape m_225251_(LevelAccessor p_225252_, BoundingBox p_225253_, Set<BlockPos> p_225254_, Set<BlockPos> p_225255_, Set<BlockPos> p_225256_) {
-      DiscreteVoxelShape discretevoxelshape = new BitSetDiscreteVoxelShape(p_225253_.m_71056_(), p_225253_.m_71057_(), p_225253_.m_71058_());
+      DiscreteVoxelShape discretevoxelshape = new BitSetDiscreteVoxelShape((int) p_225253_.getXSpan(), (int) p_225253_.getYSpan(), (int) p_225253_.getZSpan());
       int i = 7;
       List<Set<BlockPos>> list = Lists.newArrayList();
 
@@ -172,8 +_,8 @@
       }
 
       for(BlockPos blockpos : Lists.newArrayList(Sets.union(p_225255_, p_225256_))) {
-         if (p_225253_.m_71051_(blockpos)) {
-            discretevoxelshape.m_142703_(blockpos.m_123341_() - p_225253_.m_162395_(), blockpos.m_123342_() - p_225253_.m_162396_(), blockpos.m_123343_() - p_225253_.m_162398_());
+         if (p_225253_.isInside(blockpos)) {
+            discretevoxelshape.fill(blockpos.getX() - p_225253_.minX(), blockpos.getY() - p_225253_.minY(), blockpos.getZ() - p_225253_.minZ());
          }
       }
 
@@ -190,21 +_,21 @@
             Iterator<BlockPos> iterator = list.get(k1).iterator();
             BlockPos blockpos1 = iterator.next();
             iterator.remove();
-            if (p_225253_.m_71051_(blockpos1)) {
+            if (p_225253_.isInside(blockpos1)) {
                if (k1 != 0) {
                   BlockState blockstate = p_225252_.m_8055_(blockpos1);
                   m_67256_(p_225252_, blockpos1, blockstate.m_61124_(BlockStateProperties.f_61414_, Integer.valueOf(k1)));
                }
 
-               discretevoxelshape.m_142703_(blockpos1.m_123341_() - p_225253_.m_162395_(), blockpos1.m_123342_() - p_225253_.m_162396_(), blockpos1.m_123343_() - p_225253_.m_162398_());
+               discretevoxelshape.fill(blockpos1.getX() - p_225253_.minX(), blockpos1.getY() - p_225253_.minY(), blockpos1.getZ() - p_225253_.minZ());
 
                for(Direction direction : Direction.values()) {
-                  blockpos$mutableblockpos.m_122159_(blockpos1, direction);
-                  if (p_225253_.m_71051_(blockpos$mutableblockpos)) {
-                     int k = blockpos$mutableblockpos.m_123341_() - p_225253_.m_162395_();
-                     int l = blockpos$mutableblockpos.m_123342_() - p_225253_.m_162396_();
-                     int i1 = blockpos$mutableblockpos.m_123343_() - p_225253_.m_162398_();
-                     if (!discretevoxelshape.m_6696_(k, l, i1)) {
+                  blockpos$mutableblockpos.setWithOffset(blockpos1, direction);
+                  if (p_225253_.isInside(blockpos$mutableblockpos)) {
+                     long k = blockpos$mutableblockpos.getX() - p_225253_.minX();
+                     long l = blockpos$mutableblockpos.getY() - p_225253_.minY();
+                     long i1 = blockpos$mutableblockpos.getZ() - p_225253_.minZ();
+                     if (!discretevoxelshape.m_6696_((int) k, (int) l, (int) i1)) {
                         BlockState blockstate1 = p_225252_.m_8055_(blockpos$mutableblockpos);
                         OptionalInt optionalint = LeavesBlock.m_277200_(blockstate1);
                         if (!optionalint.isEmpty()) {
