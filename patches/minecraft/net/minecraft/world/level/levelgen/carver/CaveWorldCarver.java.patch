--- a/net/minecraft/world/level/levelgen/carver/CaveWorldCarver.java
+++ b/net/minecraft/world/level/levelgen/carver/CaveWorldCarver.java
@@ -23,24 +_,24 @@
    }
 
    public boolean m_213788_(CarvingContext p_224885_, CaveCarverConfiguration p_224886_, ChunkAccess p_224887_, Function<BlockPos, Holder<Biome>> p_224888_, RandomSource p_224889_, Aquifer p_224890_, ChunkPos p_224891_, CarvingMask p_224892_) {
-      int i = SectionPos.m_123223_(this.m_65073_() * 2 - 1);
+      long i = SectionPos.sectionToBlockCoord(this.m_65073_() * 2 - 1);
       int j = p_224889_.m_188503_(p_224889_.m_188503_(p_224889_.m_188503_(this.m_6208_()) + 1) + 1);
 
       for(int k = 0; k < j; ++k) {
-         double d0 = (double)p_224891_.m_151382_(p_224889_.m_188503_(16));
-         double d1 = (double)p_224886_.f_159088_.m_213859_(p_224889_, p_224885_);
-         double d2 = (double)p_224891_.m_151391_(p_224889_.m_188503_(16));
+         me.alphamode.mclong.math.BigDecimal d0 = p_224891_.getBlockBigX(p_224889_.m_188503_(16)).toBigDecimal();
+         double d1 = p_224886_.f_159088_.sample(p_224889_, p_224885_);
+         me.alphamode.mclong.math.BigDecimal d2 = p_224891_.getBlockBigZ(p_224889_.m_188503_(16)).toBigDecimal();
          double d3 = (double)p_224886_.f_159155_.m_214084_(p_224889_);
          double d4 = (double)p_224886_.f_159156_.m_214084_(p_224889_);
          double d5 = (double)p_224886_.f_159157_.m_214084_(p_224889_);
          WorldCarver.CarveSkipChecker worldcarver$carveskipchecker = (p_159202_, p_159203_, p_159204_, p_159205_, p_159206_) -> {
-            return m_159195_(p_159203_, p_159204_, p_159205_, d5);
+            return shouldSkip(p_159203_, p_159204_, p_159205_, d5);
          };
          int l = 1;
          if (p_224889_.m_188503_(4) == 0) {
             double d6 = (double)p_224886_.f_159089_.m_214084_(p_224889_);
             float f1 = 1.0F + p_224889_.m_188501_() * 6.0F;
-            this.m_190690_(p_224885_, p_224886_, p_224887_, p_224888_, p_224890_, d0, d1, d2, f1, d6, p_224892_, worldcarver$carveskipchecker);
+            this.createRoom(p_224885_, p_224886_, p_224887_, p_224888_, p_224890_, d0, d1, d2, f1, d6, p_224892_, worldcarver$carveskipchecker);
             l += p_224889_.m_188503_(4);
          }
 
@@ -48,9 +_,9 @@
             float f = p_224889_.m_188501_() * ((float)Math.PI * 2F);
             float f3 = (p_224889_.m_188501_() - 0.5F) / 4.0F;
             float f2 = this.m_213592_(p_224889_);
-            int i1 = i - p_224889_.m_188503_(i / 4);
+            long i1 = i - p_224889_.nextLong(i / 4);
             int j1 = 0;
-            this.m_190670_(p_224885_, p_224886_, p_224887_, p_224888_, p_224889_.m_188505_(), p_224890_, d0, d1, d2, d3, d4, f2, f, f3, 0, i1, this.m_6203_(), p_224892_, worldcarver$carveskipchecker);
+            this.createTunnel(p_224885_, p_224886_, p_224887_, p_224888_, p_224889_.m_188505_(), p_224890_, d0, d1, d2, d3, d4, f2, f, f3, 0, i1, this.m_6203_(), p_224892_, worldcarver$carveskipchecker);
          }
       }
 
@@ -74,15 +_,15 @@
       return 1.0D;
    }
 
-   protected void m_190690_(CarvingContext p_190691_, CaveCarverConfiguration p_190692_, ChunkAccess p_190693_, Function<BlockPos, Holder<Biome>> p_190694_, Aquifer p_190695_, double p_190696_, double p_190697_, double p_190698_, float p_190699_, double p_190700_, CarvingMask p_190701_, WorldCarver.CarveSkipChecker p_190702_) {
+   protected void createRoom(CarvingContext p_190691_, CaveCarverConfiguration p_190692_, ChunkAccess p_190693_, Function<BlockPos, Holder<Biome>> p_190694_, Aquifer p_190695_, me.alphamode.mclong.math.BigDecimal p_190696_, double p_190697_, me.alphamode.mclong.math.BigDecimal p_190698_, float p_190699_, double p_190700_, CarvingMask p_190701_, WorldCarver.CarveSkipChecker p_190702_) {
       double d0 = 1.5D + (double)(Mth.m_14031_(((float)Math.PI / 2F)) * p_190699_);
       double d1 = d0 * p_190700_;
-      this.m_190753_(p_190691_, p_190692_, p_190693_, p_190694_, p_190695_, p_190696_ + 1.0D, p_190697_, p_190698_, d0, d1, p_190701_, p_190702_);
+      this.carveEllipsoid(p_190691_, p_190692_, p_190693_, p_190694_, p_190695_, p_190696_.add(me.alphamode.mclong.math.BigDecimal.ONE), p_190697_, p_190698_, d0, d1, p_190701_, p_190702_);
    }
 
-   protected void m_190670_(CarvingContext p_190671_, CaveCarverConfiguration p_190672_, ChunkAccess p_190673_, Function<BlockPos, Holder<Biome>> p_190674_, long p_190675_, Aquifer p_190676_, double p_190677_, double p_190678_, double p_190679_, double p_190680_, double p_190681_, float p_190682_, float p_190683_, float p_190684_, int p_190685_, int p_190686_, double p_190687_, CarvingMask p_190688_, WorldCarver.CarveSkipChecker p_190689_) {
+   protected void createTunnel(CarvingContext p_190671_, CaveCarverConfiguration p_190672_, ChunkAccess p_190673_, Function<BlockPos, Holder<Biome>> p_190674_, long p_190675_, Aquifer p_190676_, me.alphamode.mclong.math.BigDecimal p_190677_, double p_190678_, me.alphamode.mclong.math.BigDecimal p_190679_, double p_190680_, double p_190681_, float p_190682_, float p_190683_, float p_190684_, int p_190685_, long p_190686_, double p_190687_, CarvingMask p_190688_, WorldCarver.CarveSkipChecker p_190689_) {
       RandomSource randomsource = RandomSource.m_216335_(p_190675_);
-      int i = randomsource.m_188503_(p_190686_ / 2) + p_190686_ / 4;
+      long i = randomsource.nextLong(p_190686_ / 2) + p_190686_ / 4;
       boolean flag = randomsource.m_188503_(6) == 0;
       float f = 0.0F;
       float f1 = 0.0F;
@@ -91,9 +_,9 @@
          double d0 = 1.5D + (double)(Mth.m_14031_((float)Math.PI * (float)j / (float)p_190686_) * p_190682_);
          double d1 = d0 * p_190687_;
          float f2 = Mth.m_14089_(p_190684_);
-         p_190677_ += (double)(Mth.m_14089_(p_190683_) * f2);
+         p_190677_ = p_190677_.add(me.alphamode.mclong.math.BigDecimal.valueOf(Mth.m_14089_(p_190683_) * f2));
          p_190678_ += (double)Mth.m_14031_(p_190684_);
-         p_190679_ += (double)(Mth.m_14031_(p_190683_) * f2);
+         p_190679_ = p_190679_.add(me.alphamode.mclong.math.BigDecimal.valueOf(Mth.m_14031_(p_190683_) * f2));
          p_190684_ *= flag ? 0.92F : 0.7F;
          p_190684_ += f1 * 0.1F;
          p_190683_ += f * 0.1F;
@@ -102,27 +_,27 @@
          f1 += (randomsource.m_188501_() - randomsource.m_188501_()) * randomsource.m_188501_() * 2.0F;
          f += (randomsource.m_188501_() - randomsource.m_188501_()) * randomsource.m_188501_() * 4.0F;
          if (j == i && p_190682_ > 1.0F) {
-            this.m_190670_(p_190671_, p_190672_, p_190673_, p_190674_, randomsource.m_188505_(), p_190676_, p_190677_, p_190678_, p_190679_, p_190680_, p_190681_, randomsource.m_188501_() * 0.5F + 0.5F, p_190683_ - ((float)Math.PI / 2F), p_190684_ / 3.0F, j, p_190686_, 1.0D, p_190688_, p_190689_);
-            this.m_190670_(p_190671_, p_190672_, p_190673_, p_190674_, randomsource.m_188505_(), p_190676_, p_190677_, p_190678_, p_190679_, p_190680_, p_190681_, randomsource.m_188501_() * 0.5F + 0.5F, p_190683_ + ((float)Math.PI / 2F), p_190684_ / 3.0F, j, p_190686_, 1.0D, p_190688_, p_190689_);
+            this.createTunnel(p_190671_, p_190672_, p_190673_, p_190674_, randomsource.m_188505_(), p_190676_, p_190677_, p_190678_, p_190679_, p_190680_, p_190681_, randomsource.m_188501_() * 0.5F + 0.5F, p_190683_ - ((float)Math.PI / 2F), p_190684_ / 3.0F, j, p_190686_, 1.0D, p_190688_, p_190689_);
+            this.createTunnel(p_190671_, p_190672_, p_190673_, p_190674_, randomsource.m_188505_(), p_190676_, p_190677_, p_190678_, p_190679_, p_190680_, p_190681_, randomsource.m_188501_() * 0.5F + 0.5F, p_190683_ + ((float)Math.PI / 2F), p_190684_ / 3.0F, j, p_190686_, 1.0D, p_190688_, p_190689_);
             return;
          }
 
          if (randomsource.m_188503_(4) != 0) {
-            if (!m_159367_(p_190673_.m_7697_(), p_190677_, p_190679_, j, p_190686_, p_190682_)) {
+            if (!canReach(p_190673_.m_7697_(), p_190677_, p_190679_, j, p_190686_, p_190682_)) {
                return;
             }
 
-            this.m_190753_(p_190671_, p_190672_, p_190673_, p_190674_, p_190676_, p_190677_, p_190678_, p_190679_, d0 * p_190680_, d1 * p_190681_, p_190688_, p_190689_);
+            this.carveEllipsoid(p_190671_, p_190672_, p_190673_, p_190674_, p_190676_, p_190677_, p_190678_, p_190679_, d0 * p_190680_, d1 * p_190681_, p_190688_, p_190689_);
          }
       }
 
    }
 
-   private static boolean m_159195_(double p_159196_, double p_159197_, double p_159198_, double p_159199_) {
+   private static boolean shouldSkip(me.alphamode.mclong.math.BigDecimal p_159196_, double p_159197_, me.alphamode.mclong.math.BigDecimal p_159198_, double p_159199_) {
       if (p_159197_ <= p_159199_) {
          return true;
       } else {
-         return p_159196_ * p_159196_ + p_159197_ * p_159197_ + p_159198_ * p_159198_ >= 1.0D;
+         return p_159196_.multiply(p_159196_).add(me.alphamode.mclong.math.BigDecimal.valueOf(p_159197_ * p_159197_)).add(p_159198_.multiply(p_159198_)).compareTo(me.alphamode.mclong.math.BigDecimal.ONE) >= 0;
       }
    }
 }
