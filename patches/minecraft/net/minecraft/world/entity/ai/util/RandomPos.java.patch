--- a/net/minecraft/world/entity/ai/util/RandomPos.java
+++ b/net/minecraft/world/entity/ai/util/RandomPos.java
@@ -37,12 +_,12 @@
    }
 
    @VisibleForTesting
-   public static BlockPos m_148545_(BlockPos p_148546_, int p_148547_, Predicate<BlockPos> p_148548_) {
-      if (!p_148548_.test(p_148546_)) {
-         return p_148546_;
+   public static BlockPos moveUpOutOfSolid(BlockPos pPos, long pMaxY, Predicate<BlockPos> pPosPredicate) {
+      if (!pPosPredicate.test(pPos)) {
+         return pPos;
       } else {
          BlockPos blockpos;
-         for(blockpos = p_148546_.m_7494_(); blockpos.m_123342_() < p_148547_ && p_148548_.test(blockpos); blockpos = blockpos.m_7494_()) {
+         for(blockpos = pPos.above(); blockpos.getY() < pMaxY && pPosPredicate.test(blockpos); blockpos = blockpos.above()) {
          }
 
          return blockpos;
@@ -50,21 +_,21 @@
    }
 
    @VisibleForTesting
-   public static BlockPos m_26947_(BlockPos p_26948_, int p_26949_, int p_26950_, Predicate<BlockPos> p_26951_) {
-      if (p_26949_ < 0) {
-         throw new IllegalArgumentException("aboveSolidAmount was " + p_26949_ + ", expected >= 0");
-      } else if (!p_26951_.test(p_26948_)) {
-         return p_26948_;
+   public static BlockPos moveUpToAboveSolid(BlockPos pPos, int pAboveSolidAmount, long pMaxY, Predicate<BlockPos> pPosPredicate) {
+      if (pAboveSolidAmount < 0) {
+         throw new IllegalArgumentException("aboveSolidAmount was " + pAboveSolidAmount + ", expected >= 0");
+      } else if (!pPosPredicate.test(pPos)) {
+         return pPos;
       } else {
          BlockPos blockpos;
-         for(blockpos = p_26948_.m_7494_(); blockpos.m_123342_() < p_26950_ && p_26951_.test(blockpos); blockpos = blockpos.m_7494_()) {
+         for(blockpos = pPos.above(); blockpos.getY() < pMaxY && pPosPredicate.test(blockpos); blockpos = blockpos.above()) {
          }
 
          BlockPos blockpos1;
          BlockPos blockpos2;
-         for(blockpos1 = blockpos; blockpos1.m_123342_() < p_26950_ && blockpos1.m_123342_() - blockpos.m_123342_() < p_26949_; blockpos1 = blockpos2) {
-            blockpos2 = blockpos1.m_7494_();
-            if (p_26951_.test(blockpos2)) {
+         for(blockpos1 = blockpos; blockpos1.getY() < pMaxY && blockpos1.getY() - blockpos.getY() < pAboveSolidAmount; blockpos1 = blockpos2) {
+            blockpos2 = blockpos1.above();
+            if (pPosPredicate.test(blockpos2)) {
                break;
             }
          }
@@ -94,27 +_,27 @@
          }
       }
 
-      return blockpos != null ? Vec3.m_82539_(blockpos) : null;
+      return blockpos != null ? Vec3.atBottomCenterOf(blockpos) : null;
    }
 
    public static BlockPos m_217863_(PathfinderMob p_217864_, int p_217865_, RandomSource p_217866_, BlockPos p_217867_) {
-      int i = p_217867_.m_123341_();
-      int j = p_217867_.m_123343_();
+      me.alphamode.mclong.math.BigInteger i = p_217867_.getBigX();
+      me.alphamode.mclong.math.BigInteger j = p_217867_.getBigZ();
       if (p_217864_.m_21536_() && p_217865_ > 1) {
          BlockPos blockpos = p_217864_.m_21534_();
-         if (p_217864_.m_20185_() > (double)blockpos.m_123341_()) {
-            i -= p_217866_.m_188503_(p_217865_ / 2);
+         if (p_217864_.getBigX().compareTo(blockpos.getBigDecX()) > 0) {
+            i = i.subtract(p_217866_.m_188503_(p_217865_ / 2));
          } else {
-            i += p_217866_.m_188503_(p_217865_ / 2);
+            i = i.add(p_217866_.m_188503_(p_217865_ / 2));
          }
 
-         if (p_217864_.m_20189_() > (double)blockpos.m_123343_()) {
-            j -= p_217866_.m_188503_(p_217865_ / 2);
+         if (p_217864_.getBigZ().compareTo(blockpos.getBigDecZ()) > 0) {
+            j = j.subtract(p_217866_.m_188503_(p_217865_ / 2));
          } else {
-            j += p_217866_.m_188503_(p_217865_ / 2);
+            j = j.add(p_217866_.m_188503_(p_217865_ / 2));
          }
       }
 
-      return BlockPos.m_274561_((double)i + p_217864_.m_20185_(), (double)p_217867_.m_123342_() + p_217864_.m_20186_(), (double)j + p_217864_.m_20189_());
+      return BlockPos.containing(i.toBigDecimal().add(p_217864_.getBigX()), p_217867_.getBigDecY().add(p_217864_.getBigY()), j.toBigDecimal().add(p_217864_.getBigZ()));
    }
 }
