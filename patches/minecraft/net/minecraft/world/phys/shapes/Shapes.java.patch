--- a/net/minecraft/world/phys/shapes/Shapes.java
+++ b/net/minecraft/world/phys/shapes/Shapes.java
@@ -17,11 +_,11 @@
    public static final double f_166026_ = 1.0E-6D;
    private static final VoxelShape f_83037_ = Util.m_137537_(() -> {
       DiscreteVoxelShape discretevoxelshape = new BitSetDiscreteVoxelShape(1, 1, 1);
-      discretevoxelshape.m_142703_(0, 0, 0);
+      discretevoxelshape.fill(0, 0, 0);
       return new CubeVoxelShape(discretevoxelshape);
    });
-   public static final VoxelShape f_83036_ = m_83048_(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
-   private static final VoxelShape f_83038_ = new ArrayVoxelShape(new BitSetDiscreteVoxelShape(0, 0, 0), (DoubleList)(new DoubleArrayList(new double[]{0.0D})), (DoubleList)(new DoubleArrayList(new double[]{0.0D})), (DoubleList)(new DoubleArrayList(new double[]{0.0D})));
+   public static final VoxelShape f_83036_ = box(me.alphamode.mclong.core.BigConstants.NEGATIVE_INFINITY, me.alphamode.mclong.core.BigConstants.NEGATIVE_INFINITY, me.alphamode.mclong.core.BigConstants.NEGATIVE_INFINITY, me.alphamode.mclong.core.BigConstants.POSITIVE_INFINITY, me.alphamode.mclong.core.BigConstants.POSITIVE_INFINITY, me.alphamode.mclong.core.BigConstants.POSITIVE_INFINITY);
+   private static final VoxelShape f_83038_ = new ArrayVoxelShape(new BitSetDiscreteVoxelShape(0, 0, 0), (new it.unimi.dsi.fastutil.objects.ObjectArrayList<>(new me.alphamode.mclong.math.BigDecimal[]{me.alphamode.mclong.math.BigDecimal.ZERO})), (new it.unimi.dsi.fastutil.objects.ObjectArrayList<>(new me.alphamode.mclong.math.BigDecimal[]{me.alphamode.mclong.math.BigDecimal.ZERO})), (new it.unimi.dsi.fastutil.objects.ObjectArrayList<>(new me.alphamode.mclong.math.BigDecimal[]{me.alphamode.mclong.math.BigDecimal.ZERO})));
 
    public static VoxelShape m_83040_() {
       return f_83038_;
@@ -33,17 +_,25 @@
 
    public static VoxelShape m_83048_(double p_83049_, double p_83050_, double p_83051_, double p_83052_, double p_83053_, double p_83054_) {
       if (!(p_83049_ > p_83052_) && !(p_83050_ > p_83053_) && !(p_83051_ > p_83054_)) {
-         return m_166049_(p_83049_, p_83050_, p_83051_, p_83052_, p_83053_, p_83054_);
-      } else {
-         throw new IllegalArgumentException("The min values need to be smaller or equals to the max values");
-      }
-   }
-
-   public static VoxelShape m_166049_(double p_166050_, double p_166051_, double p_166052_, double p_166053_, double p_166054_, double p_166055_) {
-      if (!(p_166053_ - p_166050_ < 1.0E-7D) && !(p_166054_ - p_166051_ < 1.0E-7D) && !(p_166055_ - p_166052_ < 1.0E-7D)) {
-         int i = m_83041_(p_166050_, p_166053_);
-         int j = m_83041_(p_166051_, p_166054_);
-         int k = m_83041_(p_166052_, p_166055_);
+         return create(me.alphamode.mclong.math.BigDecimal.valueOf(p_83049_), me.alphamode.mclong.math.BigDecimal.valueOf(p_83050_), me.alphamode.mclong.math.BigDecimal.valueOf(p_83051_), me.alphamode.mclong.math.BigDecimal.valueOf(p_83052_), me.alphamode.mclong.math.BigDecimal.valueOf(p_83053_), me.alphamode.mclong.math.BigDecimal.valueOf(p_83054_));
+      } else {
+         throw new IllegalArgumentException("The min values need to be smaller or equals to the max values");
+      }
+   }
+
+   public static VoxelShape box(me.alphamode.mclong.math.BigDecimal pMinX, me.alphamode.mclong.math.BigDecimal pMinY, me.alphamode.mclong.math.BigDecimal pMinZ, me.alphamode.mclong.math.BigDecimal pMaxX, me.alphamode.mclong.math.BigDecimal pMaxY, me.alphamode.mclong.math.BigDecimal pMaxZ) {
+      if (!(pMinX.compareTo(pMaxX) > 0) && !(pMinY.compareTo(pMaxY) > 0) && !(pMinZ.compareTo(pMaxZ) > 0)) {
+         return create(pMinX, pMinY, pMinZ, pMaxX, pMaxY, pMaxZ);
+      } else {
+         throw new IllegalArgumentException("The min values need to be smaller or equals to the max values");
+      }
+   }
+
+   public static VoxelShape create(me.alphamode.mclong.math.BigDecimal pMinX, me.alphamode.mclong.math.BigDecimal pMinY, me.alphamode.mclong.math.BigDecimal pMinZ, me.alphamode.mclong.math.BigDecimal pMaxX, me.alphamode.mclong.math.BigDecimal pMaxY, me.alphamode.mclong.math.BigDecimal pMaxZ) {
+      if (!(pMaxX.subtract(pMinX).compareTo(me.alphamode.mclong.core.BigConstants.EPSILON) < 0) && !(pMaxY.subtract(pMinY).compareTo(me.alphamode.mclong.core.BigConstants.EPSILON) < 0) && !(pMaxZ.subtract(pMinZ).compareTo(me.alphamode.mclong.core.BigConstants.EPSILON) < 0)) {
+         int i = findBits(pMinX, pMaxX);
+         int j = findBits(pMinY, pMaxY);
+         int k = findBits(pMinZ, pMaxZ);
          if (i >= 0 && j >= 0 && k >= 0) {
             if (i == 0 && j == 0 && k == 0) {
                return m_83144_();
@@ -51,11 +_,11 @@
                int l = 1 << i;
                int i1 = 1 << j;
                int j1 = 1 << k;
-               BitSetDiscreteVoxelShape bitsetdiscretevoxelshape = BitSetDiscreteVoxelShape.m_165932_(l, i1, j1, (int)Math.round(p_166050_ * (double)l), (int)Math.round(p_166051_ * (double)i1), (int)Math.round(p_166052_ * (double)j1), (int)Math.round(p_166053_ * (double)l), (int)Math.round(p_166054_ * (double)i1), (int)Math.round(p_166055_ * (double)j1));
+               BitSetDiscreteVoxelShape bitsetdiscretevoxelshape = BitSetDiscreteVoxelShape.m_165932_(l, i1, j1, (int)Math.round(pMinX.doubleValue() * (double)l), (int)Math.round(pMinY.doubleValue() * (double)i1), (int)Math.round(pMinZ.doubleValue() * (double)j1), (int)Math.round(pMaxX.doubleValue() * (double)l), (int)Math.round(pMaxY.doubleValue() * (double)i1), (int)Math.round(pMaxZ.doubleValue() * (double)j1));
                return new CubeVoxelShape(bitsetdiscretevoxelshape);
             }
          } else {
-            return new ArrayVoxelShape(f_83037_.f_83211_, (DoubleList)DoubleArrayList.wrap(new double[]{p_166050_, p_166053_}), (DoubleList)DoubleArrayList.wrap(new double[]{p_166051_, p_166054_}), (DoubleList)DoubleArrayList.wrap(new double[]{p_166052_, p_166055_}));
+            return new ArrayVoxelShape(f_83037_.f_83211_, it.unimi.dsi.fastutil.objects.ObjectArrayList.wrap(new me.alphamode.mclong.math.BigDecimal[]{pMinX, pMaxX}), it.unimi.dsi.fastutil.objects.ObjectArrayList.wrap(new me.alphamode.mclong.math.BigDecimal[]{pMinY, pMaxY}), it.unimi.dsi.fastutil.objects.ObjectArrayList.wrap(new me.alphamode.mclong.math.BigDecimal[]{pMinZ, pMaxZ}));
          }
       } else {
          return m_83040_();
@@ -63,18 +_,18 @@
    }
 
    public static VoxelShape m_83064_(AABB p_83065_) {
-      return m_166049_(p_83065_.f_82288_, p_83065_.f_82289_, p_83065_.f_82290_, p_83065_.f_82291_, p_83065_.f_82292_, p_83065_.f_82293_);
+      return create(p_83065_.f_82288_, p_83065_.f_82289_, p_83065_.f_82290_, p_83065_.f_82291_, p_83065_.f_82292_, p_83065_.f_82293_);
    }
 
    @VisibleForTesting
-   protected static int m_83041_(double p_83042_, double p_83043_) {
-      if (!(p_83042_ < -1.0E-7D) && !(p_83043_ > 1.0000001D)) {
+   protected static int findBits(me.alphamode.mclong.math.BigDecimal pMinBits, me.alphamode.mclong.math.BigDecimal pMaxBits) {
+      if (!(pMinBits.compareTo(me.alphamode.mclong.core.BigConstants.NEG_EPSILON) < 0) && !(pMaxBits.compareTo(me.alphamode.mclong.core.BigConstants.FIND_BITS) > 0)) {
          for(int i = 0; i <= 3; ++i) {
-            int j = 1 << i;
-            double d0 = p_83042_ * (double)j;
-            double d1 = p_83043_ * (double)j;
-            boolean flag = Math.abs(d0 - (double)Math.round(d0)) < 1.0E-7D * (double)j;
-            boolean flag1 = Math.abs(d1 - (double)Math.round(d1)) < 1.0E-7D * (double)j;
+            me.alphamode.mclong.math.BigDecimal j = me.alphamode.mclong.math.BigDecimal.valueOf(1 << i);
+            me.alphamode.mclong.math.BigDecimal d0 = pMinBits.multiply(j);
+            me.alphamode.mclong.math.BigDecimal d1 = pMaxBits.multiply(j);
+            boolean flag = d0.subtract(d0.setScale(0, java.math.RoundingMode.HALF_UP)).abs().compareTo(me.alphamode.mclong.core.BigConstants.EPSILON.multiply(j)) < 0;
+            boolean flag1 = d1.subtract(d1.setScale(0, java.math.RoundingMode.HALF_UP)).abs().compareTo(me.alphamode.mclong.core.BigConstants.EPSILON.multiply(j)) < 0;
             if (flag && flag1) {
                return i;
             }
@@ -115,11 +_,11 @@
          } else if (p_83150_.m_83281_()) {
             return flag ? p_83149_ : m_83040_();
          } else {
-            IndexMerger indexmerger = m_83058_(1, p_83149_.m_7700_(Direction.Axis.X), p_83150_.m_7700_(Direction.Axis.X), flag, flag1);
-            IndexMerger indexmerger1 = m_83058_(indexmerger.size() - 1, p_83149_.m_7700_(Direction.Axis.Y), p_83150_.m_7700_(Direction.Axis.Y), flag, flag1);
-            IndexMerger indexmerger2 = m_83058_((indexmerger.size() - 1) * (indexmerger1.size() - 1), p_83149_.m_7700_(Direction.Axis.Z), p_83150_.m_7700_(Direction.Axis.Z), flag, flag1);
+            IndexMerger indexmerger = createIndexMerger(1, p_83149_.getCoords(Direction.Axis.X), p_83150_.getCoords(Direction.Axis.X), flag, flag1);
+            IndexMerger indexmerger1 = createIndexMerger(indexmerger.size() - 1, p_83149_.getCoords(Direction.Axis.Y), p_83150_.getCoords(Direction.Axis.Y), flag, flag1);
+            IndexMerger indexmerger2 = createIndexMerger((indexmerger.size() - 1) * (indexmerger1.size() - 1), p_83149_.getCoords(Direction.Axis.Z), p_83150_.getCoords(Direction.Axis.Z), flag, flag1);
             BitSetDiscreteVoxelShape bitsetdiscretevoxelshape = BitSetDiscreteVoxelShape.m_82641_(p_83149_.f_83211_, p_83150_.f_83211_, indexmerger, indexmerger1, indexmerger2, p_83151_);
-            return (VoxelShape)(indexmerger instanceof DiscreteCubeMerger && indexmerger1 instanceof DiscreteCubeMerger && indexmerger2 instanceof DiscreteCubeMerger ? new CubeVoxelShape(bitsetdiscretevoxelshape) : new ArrayVoxelShape(bitsetdiscretevoxelshape, indexmerger.m_6241_(), indexmerger1.m_6241_(), indexmerger2.m_6241_()));
+            return (VoxelShape)(indexmerger instanceof DiscreteCubeMerger && indexmerger1 instanceof DiscreteCubeMerger && indexmerger2 instanceof DiscreteCubeMerger ? new CubeVoxelShape(bitsetdiscretevoxelshape) : new ArrayVoxelShape(bitsetdiscretevoxelshape, indexmerger.getList(), indexmerger1.getList(), indexmerger2.getList()));
          }
       }
    }
@@ -147,9 +_,9 @@
                   }
                }
 
-               IndexMerger indexmerger = m_83058_(1, p_83158_.m_7700_(Direction.Axis.X), p_83159_.m_7700_(Direction.Axis.X), flag2, flag3);
-               IndexMerger indexmerger1 = m_83058_(indexmerger.size() - 1, p_83158_.m_7700_(Direction.Axis.Y), p_83159_.m_7700_(Direction.Axis.Y), flag2, flag3);
-               IndexMerger indexmerger2 = m_83058_((indexmerger.size() - 1) * (indexmerger1.size() - 1), p_83158_.m_7700_(Direction.Axis.Z), p_83159_.m_7700_(Direction.Axis.Z), flag2, flag3);
+               IndexMerger indexmerger = createIndexMerger(1, p_83158_.getCoords(Direction.Axis.X), p_83159_.getCoords(Direction.Axis.X), flag2, flag3);
+               IndexMerger indexmerger1 = createIndexMerger(indexmerger.size() - 1, p_83158_.getCoords(Direction.Axis.Y), p_83159_.getCoords(Direction.Axis.Y), flag2, flag3);
+               IndexMerger indexmerger2 = createIndexMerger((indexmerger.size() - 1) * (indexmerger1.size() - 1), p_83158_.getCoords(Direction.Axis.Z), p_83159_.getCoords(Direction.Axis.Z), flag2, flag3);
                return m_83103_(indexmerger, indexmerger1, indexmerger2, p_83158_.f_83211_, p_83159_.f_83211_, p_83160_);
             }
          } else {
@@ -168,16 +_,16 @@
       });
    }
 
-   public static double m_193135_(Direction.Axis p_193136_, AABB p_193137_, Iterable<VoxelShape> p_193138_, double p_193139_) {
-      for(VoxelShape voxelshape : p_193138_) {
-         if (Math.abs(p_193139_) < 1.0E-7D) {
-            return 0.0D;
+   public static me.alphamode.mclong.math.BigDecimal collide(Direction.Axis pMovementAxis, AABB pCollisionBox, Iterable<VoxelShape> pPossibleHits, me.alphamode.mclong.math.BigDecimal pDesiredOffset) {
+      for(VoxelShape voxelshape : pPossibleHits) {
+         if (pDesiredOffset.abs().compareTo(me.alphamode.mclong.core.BigConstants.EPSILON) < 0) {
+            return me.alphamode.mclong.math.BigDecimal.ZERO;
          }
 
-         p_193139_ = voxelshape.m_83259_(p_193136_, p_193137_, p_193139_);
+         pDesiredOffset = voxelshape.collide(pMovementAxis, pCollisionBox, pDesiredOffset);
       }
 
-      return p_193139_;
+      return pDesiredOffset;
    }
 
    public static boolean m_83117_(VoxelShape p_83118_, VoxelShape p_83119_, Direction p_83120_) {
@@ -247,26 +_,30 @@
    }
 
    @VisibleForTesting
-   protected static IndexMerger m_83058_(int p_83059_, DoubleList p_83060_, DoubleList p_83061_, boolean p_83062_, boolean p_83063_) {
-      int i = p_83060_.size() - 1;
-      int j = p_83061_.size() - 1;
-      if (p_83060_ instanceof CubePointRange && p_83061_ instanceof CubePointRange) {
+   protected static IndexMerger createIndexMerger(int pSize, it.unimi.dsi.fastutil.objects.ObjectList<me.alphamode.mclong.math.BigDecimal> pList1, it.unimi.dsi.fastutil.objects.ObjectList<me.alphamode.mclong.math.BigDecimal> pList2, boolean pExcludeUpper, boolean pExcludeLower) {
+      int i = pList1.size() - 1;
+      int j = pList2.size() - 1;
+      if (pList1 instanceof CubePointRange && pList2 instanceof CubePointRange) {
          long k = m_83055_(i, j);
-         if ((long)p_83059_ * k <= 256L) {
+         if ((long)pSize * k <= 256L) {
             return new DiscreteCubeMerger(i, j);
          }
       }
 
-      if (p_83060_.getDouble(i) < p_83061_.getDouble(0) - 1.0E-7D) {
-         return new NonOverlappingMerger(p_83060_, p_83061_, false);
-      } else if (p_83061_.getDouble(j) < p_83060_.getDouble(0) - 1.0E-7D) {
-         return new NonOverlappingMerger(p_83061_, p_83060_, true);
+      if (pList1.get(i).compareTo(pList2.get(0).subtract(me.alphamode.mclong.core.BigConstants.EPSILON)) < 0) {
+         return new NonOverlappingMerger(pList1, pList2, false);
+      } else if (pList2.get(j).compareTo(pList1.get(0).subtract(me.alphamode.mclong.core.BigConstants.EPSILON)) < 0) {
+         return new NonOverlappingMerger(pList2, pList1, true);
       } else {
-         return (IndexMerger)(i == j && Objects.equals(p_83060_, p_83061_) ? new IdenticalMerger(p_83060_) : new IndirectMerger(p_83060_, p_83061_, p_83062_, p_83063_));
+         return (IndexMerger)(i == j && Objects.equals(pList1, pList2) ? new IdenticalMerger(pList1) : new IndirectMerger(pList1, pList2, pExcludeUpper, pExcludeLower));
       }
    }
 
    public interface DoubleLineConsumer {
       void m_83161_(double p_83162_, double p_83163_, double p_83164_, double p_83165_, double p_83166_, double p_83167_);
+   }
+
+   public interface BigLineConsumer {
+      void consume(me.alphamode.mclong.math.BigDecimal pMinX, me.alphamode.mclong.math.BigDecimal pMinY, me.alphamode.mclong.math.BigDecimal pMinZ, me.alphamode.mclong.math.BigDecimal pMaxX, me.alphamode.mclong.math.BigDecimal pMaxY, me.alphamode.mclong.math.BigDecimal pMaxZ);
    }
 }
