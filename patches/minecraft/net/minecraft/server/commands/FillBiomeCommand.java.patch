--- a/net/minecraft/server/commands/FillBiomeCommand.java
+++ b/net/minecraft/server/commands/FillBiomeCommand.java
@@ -46,21 +_,21 @@
       })))))));
    }
 
-   private static int m_261188_(int p_261998_) {
-      return QuartPos.m_175402_(QuartPos.m_175400_(p_261998_));
+   private static me.alphamode.mclong.math.BigInteger quantize(me.alphamode.mclong.math.BigInteger p_261998_) {
+      return QuartPos.toBlock(QuartPos.fromBlock(p_261998_));
    }
 
    private static BlockPos m_260812_(BlockPos p_262148_) {
-      return new BlockPos(m_261188_(p_262148_.m_123341_()), m_261188_(p_262148_.m_123342_()), m_261188_(p_262148_.m_123343_()));
+      return new BlockPos(quantize(p_262148_.getBigX()), quantize(p_262148_.getBigY()), quantize(p_262148_.getBigZ()));
    }
 
    private static BiomeResolver m_262439_(MutableInt p_262615_, ChunkAccess p_262698_, BoundingBox p_262622_, Holder<Biome> p_262705_, Predicate<Holder<Biome>> p_262695_) {
       return (p_262550_, p_262551_, p_262552_, p_262553_) -> {
-         int i = QuartPos.m_175402_(p_262550_);
-         int j = QuartPos.m_175402_(p_262551_);
-         int k = QuartPos.m_175402_(p_262552_);
-         Holder<Biome> holder = p_262698_.m_203495_(p_262550_, p_262551_, p_262552_);
-         if (p_262622_.m_260866_(i, j, k) && p_262695_.test(holder)) {
+         me.alphamode.mclong.math.BigInteger i = QuartPos.toBlock(p_262550_);
+         me.alphamode.mclong.math.BigInteger j = QuartPos.toBlock(p_262551_);
+         me.alphamode.mclong.math.BigInteger k = QuartPos.toBlock(p_262552_);
+         Holder<Biome> holder = p_262698_.getNoiseBiome(p_262550_, p_262551_, p_262552_);
+         if (p_262622_.isInside(i, j, k) && p_262695_.test(holder)) {
             p_262615_.increment();
             return p_262705_;
          } else {
@@ -72,8 +_,8 @@
    private static int m_262457_(CommandSourceStack p_262664_, BlockPos p_262651_, BlockPos p_262678_, Holder.Reference<Biome> p_262612_, Predicate<Holder<Biome>> p_262697_) throws CommandSyntaxException {
       BlockPos blockpos = m_260812_(p_262651_);
       BlockPos blockpos1 = m_260812_(p_262678_);
-      BoundingBox boundingbox = BoundingBox.m_162375_(blockpos, blockpos1);
-      int i = boundingbox.m_71056_() * boundingbox.m_71057_() * boundingbox.m_71058_();
+      BoundingBox boundingbox = BoundingBox.fromCorners(blockpos, blockpos1);
+      long i = boundingbox.getXSpan() * boundingbox.getYSpan() * boundingbox.getZSpan();
       int j = p_262664_.m_81372_().m_46469_().m_46215_(GameRules.f_263760_);
       if (i > j) {
          throw f_260575_.create(j, i);
@@ -81,9 +_,9 @@
          ServerLevel serverlevel = p_262664_.m_81372_();
          List<ChunkAccess> list = new ArrayList<>();
 
-         for(int k = SectionPos.m_123171_(boundingbox.m_162398_()); k <= SectionPos.m_123171_(boundingbox.m_162401_()); ++k) {
-            for(int l = SectionPos.m_123171_(boundingbox.m_162395_()); l <= SectionPos.m_123171_(boundingbox.m_162399_()); ++l) {
-               ChunkAccess chunkaccess = serverlevel.m_6522_(l, k, ChunkStatus.f_62326_, false);
+         for(me.alphamode.mclong.math.BigInteger k = SectionPos.blockToSectionCoord(boundingbox.minBigZ()); k.compareTo(SectionPos.blockToSectionCoord(boundingbox.maxBigZ())) <= 0; k = k.add()) {
+            for(me.alphamode.mclong.math.BigInteger l = SectionPos.blockToSectionCoord(boundingbox.minBigX()); l.compareTo(SectionPos.blockToSectionCoord(boundingbox.maxBigX())) <= 0; l = l.add()) {
+               ChunkAccess chunkaccess = serverlevel.getChunk(l, k, ChunkStatus.f_62326_, false);
                if (chunkaccess == null) {
                   throw f_260663_.create();
                }
@@ -101,7 +_,7 @@
 
          serverlevel.m_7726_().f_8325_.m_274524_(list);
          p_262664_.m_288197_(() -> {
-            return Component.m_237110_("commands.fillbiome.success.count", mutableint.getValue(), boundingbox.m_162395_(), boundingbox.m_162396_(), boundingbox.m_162398_(), boundingbox.m_162399_(), boundingbox.m_162400_(), boundingbox.m_162401_());
+            return Component.m_237110_("commands.fillbiome.success.count", mutableint.getValue(), boundingbox.minX(), boundingbox.minY(), boundingbox.minZ(), boundingbox.maxX(), boundingbox.maxY(), boundingbox.maxZ());
          }, true);
          return mutableint.getValue();
       }
