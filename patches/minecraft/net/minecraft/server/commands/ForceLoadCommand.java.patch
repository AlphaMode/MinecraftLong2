--- a/net/minecraft/server/commands/ForceLoadCommand.java
+++ b/net/minecraft/server/commands/ForceLoadCommand.java
@@ -53,7 +_,7 @@
       ChunkPos chunkpos = p_137684_.m_143196_();
       ServerLevel serverlevel = p_137683_.m_81372_();
       ResourceKey<Level> resourcekey = serverlevel.m_46472_();
-      boolean flag = serverlevel.m_8902_().contains(chunkpos.m_45588_());
+      boolean flag = serverlevel.getForcedChunks().contains(chunkpos);
       if (flag) {
          p_137683_.m_288197_(() -> {
             return Component.m_237110_("commands.forceload.query.success", chunkpos, resourcekey.m_135782_());
@@ -67,10 +_,10 @@
    private static int m_137680_(CommandSourceStack p_137681_) {
       ServerLevel serverlevel = p_137681_.m_81372_();
       ResourceKey<Level> resourcekey = serverlevel.m_46472_();
-      LongSet longset = serverlevel.m_8902_();
+      it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos> longset = serverlevel.getForcedChunks();
       int i = longset.size();
       if (i > 0) {
-         String s = Joiner.on(", ").join(longset.stream().sorted().map(ChunkPos::new).map(ChunkPos::toString).iterator());
+         String s = Joiner.on(", ").join(longset.stream().sorted().map(ChunkPos::toString).iterator());
          if (i == 1) {
             p_137681_.m_288197_(() -> {
                return Component.m_237110_("commands.forceload.list.single", resourcekey.m_135782_(), s);
@@ -90,9 +_,9 @@
    private static int m_137695_(CommandSourceStack p_137696_) {
       ServerLevel serverlevel = p_137696_.m_81372_();
       ResourceKey<Level> resourcekey = serverlevel.m_46472_();
-      LongSet longset = serverlevel.m_8902_();
+      it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos> longset = serverlevel.getForcedChunks();
       longset.forEach((p_137675_) -> {
-         serverlevel.m_8602_(ChunkPos.m_45592_(p_137675_), ChunkPos.m_45602_(p_137675_), false);
+         serverlevel.setChunkForced(p_137675_.f_45578_, p_137675_.y, p_137675_.f_45579_, false);
       });
       p_137696_.m_288197_(() -> {
          return Component.m_237110_("commands.forceload.removed.all", resourcekey.m_135782_());
@@ -101,15 +_,18 @@
    }
 
    private static int m_137685_(CommandSourceStack p_137686_, ColumnPos p_137687_, ColumnPos p_137688_, boolean p_137689_) throws CommandSyntaxException {
-      int i = Math.min(p_137687_.f_140723_(), p_137688_.f_140723_());
-      int j = Math.min(p_137687_.f_140724_(), p_137688_.f_140724_());
-      int k = Math.max(p_137687_.f_140723_(), p_137688_.f_140723_());
-      int l = Math.max(p_137687_.f_140724_(), p_137688_.f_140724_());
-      if (i >= -30000000 && j >= -30000000 && k < 30000000 && l < 30000000) {
-         int i1 = SectionPos.m_123171_(i);
-         int j1 = SectionPos.m_123171_(j);
-         int k1 = SectionPos.m_123171_(k);
-         int l1 = SectionPos.m_123171_(l);
+      long i = Math.min(p_137687_.x(), p_137688_.x());
+      long minY = Math.min(p_137687_.y(), p_137688_.y());
+      long j = Math.min(p_137687_.z(), p_137688_.z());
+      long k = Math.max(p_137687_.x(), p_137688_.x());
+      long maxY = Math.max(p_137687_.y(), p_137688_.y());
+      long l = Math.max(p_137687_.z(), p_137688_.z());
+         long i1 = SectionPos.blockToSectionCoord(i);
+         long y1 = SectionPos.blockToSectionCoord(minY);
+         long j1 = SectionPos.blockToSectionCoord(j);
+         long k1 = SectionPos.blockToSectionCoord(k);
+         long y2 = SectionPos.blockToSectionCoord(maxY);
+         long l1 = SectionPos.blockToSectionCoord(l);
          long i2 = ((long)(k1 - i1) + 1L) * ((long)(l1 - j1) + 1L);
          if (i2 > 256L) {
             throw f_137668_.create(256, i2);
@@ -119,16 +_,18 @@
             ChunkPos chunkpos = null;
             int j2 = 0;
 
-            for(int k2 = i1; k2 <= k1; ++k2) {
-               for(int l2 = j1; l2 <= l1; ++l2) {
-                  boolean flag = serverlevel.m_8602_(k2, l2, p_137689_);
+            for(long k2 = i1; k2 <= k1; ++k2) {
+               for(long chunkY = y1; chunkY <= y2; ++chunkY) {
+               for(long l2 = j1; l2 <= l1; ++l2) {
+                  boolean flag = serverlevel.setChunkForced(k2, chunkY, l2, p_137689_);
                   if (flag) {
                      ++j2;
                      if (chunkpos == null) {
-                        chunkpos = new ChunkPos(k2, l2);
+                        chunkpos = new ChunkPos(k2, chunkY, l2);
                      }
                   }
                }
+               }
             }
 
             ChunkPos chunkpos1 = chunkpos;
@@ -140,8 +_,8 @@
                      return Component.m_237110_("commands.forceload." + (p_137689_ ? "added" : "removed") + ".single", chunkpos1, resourcekey.m_135782_());
                   }, true);
                } else {
-                  ChunkPos chunkpos2 = new ChunkPos(i1, j1);
-                  ChunkPos chunkpos3 = new ChunkPos(k1, l1);
+                  ChunkPos chunkpos2 = new ChunkPos(i1, y1, j1);
+                  ChunkPos chunkpos3 = new ChunkPos(k1, y2, l1);
                   p_137686_.m_288197_(() -> {
                      return Component.m_237110_("commands.forceload." + (p_137689_ ? "added" : "removed") + ".multiple", chunkpos1, resourcekey.m_135782_(), chunkpos2, chunkpos3);
                   }, true);
@@ -150,8 +_,5 @@
                return j2;
             }
          }
-      } else {
-         throw BlockPosArgument.f_118235_.create();
-      }
    }
 }
