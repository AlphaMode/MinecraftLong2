--- a/net/minecraft/server/level/DistanceManager.java
+++ b/net/minecraft/server/level/DistanceManager.java
@@ -39,8 +_,8 @@
    static final Logger f_140758_ = LogUtils.getLogger();
    static final int f_140759_ = ChunkLevel.m_287154_(FullChunkStatus.ENTITY_TICKING);
    private static final int f_143206_ = 4;
-   final Long2ObjectMap<ObjectSet<ServerPlayer>> f_140760_ = new Long2ObjectOpenHashMap<>();
-   final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> f_140761_ = new Long2ObjectOpenHashMap<>();
+   final it.unimi.dsi.fastutil.objects.Object2ObjectMap<ChunkPos, ObjectSet<ServerPlayer>> f_140760_ = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>();
+   final it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<ChunkPos, SortedArraySet<Ticket<?>>> f_140761_ = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>();
    private final DistanceManager.ChunkTicketTracker f_140762_ = new DistanceManager.ChunkTicketTracker();
    private final DistanceManager.FixedPlayerDistanceChunkTracker f_140763_ = new DistanceManager.FixedPlayerDistanceChunkTracker(8);
    private final TickingTracker f_183901_ = new TickingTracker();
@@ -49,7 +_,7 @@
    final ChunkTaskPriorityQueueSorter f_140766_;
    final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> f_140767_;
    final ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> f_140768_;
-   final LongSet f_140769_ = new LongOpenHashSet();
+   final it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos> f_140769_ = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>();
    final Executor f_140770_;
    private long f_140771_;
    private int f_183902_ = 10;
@@ -65,10 +_,10 @@
 
    protected void m_140776_() {
       ++this.f_140771_;
-      ObjectIterator<Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>>> objectiterator = this.f_140761_.long2ObjectEntrySet().fastIterator();
+      ObjectIterator<it.unimi.dsi.fastutil.objects.Object2ObjectMap.Entry<ChunkPos, SortedArraySet<Ticket<?>>>> objectiterator = this.f_140761_.object2ObjectEntrySet().fastIterator();
 
       while(objectiterator.hasNext()) {
-         Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>> entry = objectiterator.next();
+         it.unimi.dsi.fastutil.objects.Object2ObjectMap.Entry<ChunkPos, SortedArraySet<Ticket<?>>> entry = objectiterator.next();
          Iterator<Ticket<?>> iterator = entry.getValue().iterator();
          boolean flag = false;
 
@@ -77,12 +_,12 @@
             if (ticket.m_9434_(this.f_140771_)) {
                iterator.remove();
                flag = true;
-               this.f_183901_.m_184165_(entry.getLongKey(), ticket);
+               this.f_183901_.removeTicket(entry.getKey(), ticket);
             }
          }
 
          if (flag) {
-            this.f_140762_.m_140715_(entry.getLongKey(), m_140797_(entry.getValue()), false);
+            this.f_140762_.update(entry.getKey(), m_140797_(entry.getValue()), false);
          }
 
          if (entry.getValue().isEmpty()) {
@@ -96,13 +_,13 @@
       return !p_140798_.isEmpty() ? p_140798_.m_14262_().m_9433_() : ChunkLevel.f_286967_ + 1;
    }
 
-   protected abstract boolean m_7009_(long p_140779_);
-
-   @Nullable
-   protected abstract ChunkHolder m_7316_(long p_140817_);
-
-   @Nullable
-   protected abstract ChunkHolder m_7288_(long p_140780_, int p_140781_, @Nullable ChunkHolder p_140782_, int p_140783_);
+   protected abstract boolean isChunkToRemove(ChunkPos p_140779_);
+
+   @Nullable
+   protected abstract ChunkHolder getChunk(ChunkPos p_140817_);
+
+   @Nullable
+   protected abstract ChunkHolder updateChunkScheduling(ChunkPos p_140780_, int p_140781_, @Nullable ChunkHolder p_140782_, int p_140783_);
 
    public boolean m_140805_(ChunkMap p_140806_) {
       this.f_140763_.m_6410_();
@@ -121,14 +_,14 @@
          return true;
       } else {
          if (!this.f_140769_.isEmpty()) {
-            LongIterator longiterator = this.f_140769_.iterator();
+            it.unimi.dsi.fastutil.objects.ObjectIterator<ChunkPos> longiterator = this.f_140769_.iterator();
 
             while(longiterator.hasNext()) {
-               long j = longiterator.nextLong();
-               if (this.m_140857_(j).stream().anyMatch((p_183910_) -> {
+               ChunkPos j = longiterator.next();
+               if (this.getTickets(j).stream().anyMatch((p_183910_) -> {
                   return p_183910_.m_9428_() == TicketType.f_9444_;
                })) {
-                  ChunkHolder chunkholder = p_140806_.m_140174_(j);
+                  ChunkHolder chunkholder = p_140806_.getUpdatingChunkIfPresent(j);
                   if (chunkholder == null) {
                      throw new IllegalStateException();
                   }
@@ -136,7 +_,7 @@
                   CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completablefuture = chunkholder.m_140073_();
                   completablefuture.thenAccept((p_183905_) -> {
                      this.f_140770_.execute(() -> {
-                        this.f_140768_.m_6937_(ChunkTaskPriorityQueueSorter.m_140628_(() -> {
+                        this.f_140768_.m_6937_(ChunkTaskPriorityQueueSorter.release(() -> {
                         }, j, false));
                      });
                   });
@@ -150,19 +_,19 @@
       }
    }
 
-   void m_140784_(long p_140785_, Ticket<?> p_140786_) {
-      SortedArraySet<Ticket<?>> sortedarrayset = this.m_140857_(p_140785_);
+   void addTicket(ChunkPos p_140785_, Ticket<?> p_140786_) {
+      SortedArraySet<Ticket<?>> sortedarrayset = this.getTickets(p_140785_);
       int i = m_140797_(sortedarrayset);
       Ticket<?> ticket = sortedarrayset.m_14253_(p_140786_);
       ticket.m_9429_(this.f_140771_);
       if (p_140786_.m_9433_() < i) {
-         this.f_140762_.m_140715_(p_140785_, p_140786_.m_9433_(), true);
+         this.f_140762_.update(p_140785_, p_140786_.m_9433_(), true);
       }
 
    }
 
-   void m_140818_(long p_140819_, Ticket<?> p_140820_) {
-      SortedArraySet<Ticket<?>> sortedarrayset = this.m_140857_(p_140819_);
+   void removeTicket(ChunkPos p_140819_, Ticket<?> p_140820_) {
+      SortedArraySet<Ticket<?>> sortedarrayset = this.getTickets(p_140819_);
       if (sortedarrayset.remove(p_140820_)) {
       }
 
@@ -170,33 +_,31 @@
          this.f_140761_.remove(p_140819_);
       }
 
-      this.f_140762_.m_140715_(p_140819_, m_140797_(sortedarrayset), false);
+      this.f_140762_.update(p_140819_, m_140797_(sortedarrayset), false);
    }
 
    public <T> void m_140792_(TicketType<T> p_140793_, ChunkPos p_140794_, int p_140795_, T p_140796_) {
-      this.m_140784_(p_140794_.m_45588_(), new Ticket<>(p_140793_, p_140795_, p_140796_));
+      this.addTicket(p_140794_, new Ticket<>(p_140793_, p_140795_, p_140796_));
    }
 
    public <T> void m_140823_(TicketType<T> p_140824_, ChunkPos p_140825_, int p_140826_, T p_140827_) {
       Ticket<T> ticket = new Ticket<>(p_140824_, p_140826_, p_140827_);
-      this.m_140818_(p_140825_.m_45588_(), ticket);
+      this.removeTicket(p_140825_, ticket);
    }
 
    public <T> void m_140840_(TicketType<T> p_140841_, ChunkPos p_140842_, int p_140843_, T p_140844_) {
       Ticket<T> ticket = new Ticket<>(p_140841_, ChunkLevel.m_287154_(FullChunkStatus.FULL) - p_140843_, p_140844_);
-      long i = p_140842_.m_45588_();
-      this.m_140784_(i, ticket);
-      this.f_183901_.m_184151_(i, ticket);
+      this.addTicket(p_140842_, ticket);
+      this.f_183901_.addTicket(p_140842_, ticket);
    }
 
    public <T> void m_140849_(TicketType<T> p_140850_, ChunkPos p_140851_, int p_140852_, T p_140853_) {
       Ticket<T> ticket = new Ticket<>(p_140850_, ChunkLevel.m_287154_(FullChunkStatus.FULL) - p_140852_, p_140853_);
-      long i = p_140851_.m_45588_();
-      this.m_140818_(i, ticket);
-      this.f_183901_.m_184165_(i, ticket);
+      this.removeTicket(p_140851_, ticket);
+      this.f_183901_.removeTicket(p_140851_, ticket);
    }
 
-   private SortedArraySet<Ticket<?>> m_140857_(long p_140858_) {
+   private SortedArraySet<Ticket<?>> getTickets(ChunkPos p_140858_) {
       return this.f_140761_.computeIfAbsent(p_140858_, (p_183923_) -> {
          return SortedArraySet.m_14246_(4);
       });
@@ -204,37 +_,34 @@
 
    protected void m_140799_(ChunkPos p_140800_, boolean p_140801_) {
       Ticket<ChunkPos> ticket = new Ticket<>(TicketType.f_9445_, ChunkMap.f_143033_, p_140800_);
-      long i = p_140800_.m_45588_();
       if (p_140801_) {
-         this.m_140784_(i, ticket);
-         this.f_183901_.m_184151_(i, ticket);
+         this.addTicket(p_140800_, ticket);
+         this.f_183901_.addTicket(p_140800_, ticket);
       } else {
-         this.m_140818_(i, ticket);
-         this.f_183901_.m_184165_(i, ticket);
+         this.removeTicket(p_140800_, ticket);
+         this.f_183901_.removeTicket(p_140800_, ticket);
       }
 
    }
 
    public void m_140802_(SectionPos p_140803_, ServerPlayer p_140804_) {
       ChunkPos chunkpos = p_140803_.m_123251_();
-      long i = chunkpos.m_45588_();
-      this.f_140760_.computeIfAbsent(i, (p_183921_) -> {
+      this.f_140760_.computeIfAbsent(chunkpos, (p_183921_) -> {
          return new ObjectOpenHashSet();
       }).add(p_140804_);
-      this.f_140763_.m_140715_(i, 0, true);
-      this.f_140764_.m_140715_(i, 0, true);
+      this.f_140763_.update(chunkpos, 0, true);
+      this.f_140764_.update(chunkpos, 0, true);
       this.f_183901_.m_184154_(TicketType.f_9444_, chunkpos, this.m_183918_(), chunkpos);
    }
 
    public void m_140828_(SectionPos p_140829_, ServerPlayer p_140830_) {
       ChunkPos chunkpos = p_140829_.m_123251_();
-      long i = chunkpos.m_45588_();
-      ObjectSet<ServerPlayer> objectset = this.f_140760_.get(i);
+      ObjectSet<ServerPlayer> objectset = this.f_140760_.get(chunkpos);
       objectset.remove(p_140830_);
       if (objectset.isEmpty()) {
-         this.f_140760_.remove(i);
-         this.f_140763_.m_140715_(i, Integer.MAX_VALUE, false);
-         this.f_140764_.m_140715_(i, Integer.MAX_VALUE, false);
+         this.f_140760_.remove(chunkpos);
+         this.f_140763_.update(chunkpos, Integer.MAX_VALUE, false);
+         this.f_140764_.update(chunkpos, Integer.MAX_VALUE, false);
          this.f_183901_.m_184168_(TicketType.f_9444_, chunkpos, this.m_183918_(), chunkpos);
       }
 
@@ -244,15 +_,15 @@
       return Math.max(0, ChunkLevel.m_287154_(FullChunkStatus.ENTITY_TICKING) - this.f_183902_);
    }
 
-   public boolean m_183913_(long p_183914_) {
-      return ChunkLevel.m_287155_(this.f_183901_.m_6172_(p_183914_));
-   }
-
-   public boolean m_183916_(long p_183917_) {
-      return ChunkLevel.m_287283_(this.f_183901_.m_6172_(p_183917_));
-   }
-
-   protected String m_140838_(long p_140839_) {
+   public boolean inEntityTickingRange(ChunkPos p_183914_) {
+      return this.f_183901_.getLevel(p_183914_) < 32;
+   }
+
+   public boolean inBlockTickingRange(ChunkPos p_183917_) {
+      return this.f_183901_.getLevel(p_183917_) < 33;
+   }
+
+   protected String getTicketDebugString(ChunkPos p_140839_) {
       SortedArraySet<Ticket<?>> sortedarrayset = this.f_140761_.get(p_140839_);
       return sortedarrayset != null && !sortedarrayset.isEmpty() ? sortedarrayset.m_14262_().toString() : "no_ticket";
    }
@@ -274,7 +_,7 @@
       return this.f_140763_.f_140886_.size();
    }
 
-   public boolean m_140847_(long p_140848_) {
+   public boolean hasPlayersNearby(ChunkPos p_140848_) {
       this.f_140763_.m_6410_();
       return this.f_140763_.f_140886_.containsKey(p_140848_);
    }
@@ -285,8 +_,8 @@
 
    private void m_143207_(String p_143208_) {
       try (FileOutputStream fileoutputstream = new FileOutputStream(new File(p_143208_))) {
-         for(Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>> entry : this.f_140761_.long2ObjectEntrySet()) {
-            ChunkPos chunkpos = new ChunkPos(entry.getLongKey());
+         for(it.unimi.dsi.fastutil.objects.Object2ObjectMap.Entry<ChunkPos, SortedArraySet<Ticket<?>>> entry : this.f_140761_.object2ObjectEntrySet()) {
+            ChunkPos chunkpos = entry.getKey();
 
             for(Ticket<?> ticket : entry.getValue()) {
                fileoutputstream.write((chunkpos.f_45578_ + "\t" + chunkpos.f_45579_ + "\t" + ticket.m_9428_() + "\t" + ticket.m_9433_() + "\t\n").getBytes(StandardCharsets.UTF_8));
@@ -305,10 +_,10 @@
 
    public void m_201910_() {
       ImmutableSet<TicketType<?>> immutableset = ImmutableSet.of(TicketType.f_9449_, TicketType.f_9448_, TicketType.f_9446_);
-      ObjectIterator<Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>>> objectiterator = this.f_140761_.long2ObjectEntrySet().fastIterator();
+      ObjectIterator<it.unimi.dsi.fastutil.objects.Object2ObjectMap.Entry<ChunkPos, SortedArraySet<Ticket<?>>>> objectiterator = this.f_140761_.object2ObjectEntrySet().fastIterator();
 
       while(objectiterator.hasNext()) {
-         Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>> entry = objectiterator.next();
+         it.unimi.dsi.fastutil.objects.Object2ObjectMap.Entry<ChunkPos, SortedArraySet<Ticket<?>>> entry = objectiterator.next();
          Iterator<Ticket<?>> iterator = entry.getValue().iterator();
          boolean flag = false;
 
@@ -317,12 +_,12 @@
             if (!immutableset.contains(ticket.m_9428_())) {
                iterator.remove();
                flag = true;
-               this.f_183901_.m_184165_(entry.getLongKey(), ticket);
+               this.f_183901_.removeTicket(entry.getKey(), ticket);
             }
          }
 
          if (flag) {
-            this.f_140762_.m_140715_(entry.getLongKey(), m_140797_(entry.getValue()), false);
+            this.f_140762_.update(entry.getKey(), m_140797_(entry.getValue()), false);
          }
 
          if (entry.getValue().isEmpty()) {
@@ -343,7 +_,7 @@
          super(f_286988_ + 1, 16, 256);
       }
 
-      protected int m_7031_(long p_140883_) {
+      protected int getLevelFromSource(net.minecraft.world.level.ChunkPos p_140883_) {
          SortedArraySet<Ticket<?>> sortedarrayset = DistanceManager.this.f_140761_.get(p_140883_);
          if (sortedarrayset == null) {
             return Integer.MAX_VALUE;
@@ -352,9 +_,10 @@
          }
       }
 
-      protected int m_6172_(long p_140885_) {
-         if (!DistanceManager.this.m_7009_(p_140885_)) {
-            ChunkHolder chunkholder = DistanceManager.this.m_7316_(p_140885_);
+      protected int getLevel(net.minecraft.world.level.ChunkPos p_140885_) {
+         var chunk = p_140885_;
+         if (!DistanceManager.this.isChunkToRemove(chunk)) {
+            ChunkHolder chunkholder = DistanceManager.this.getChunk(chunk);
             if (chunkholder != null) {
                return chunkholder.m_140093_();
             }
@@ -363,11 +_,12 @@
          return f_286988_;
       }
 
-      protected void m_7351_(long p_140880_, int p_140881_) {
-         ChunkHolder chunkholder = DistanceManager.this.m_7316_(p_140880_);
+      protected void setLevel(net.minecraft.world.level.ChunkPos p_140880_, int p_140881_) {
+         ChunkPos pos = p_140880_;
+         ChunkHolder chunkholder = DistanceManager.this.getChunk(pos);
          int i = chunkholder == null ? f_286988_ : chunkholder.m_140093_();
          if (i != p_140881_) {
-            chunkholder = DistanceManager.this.m_7288_(p_140880_, p_140881_, chunkholder, i);
+            chunkholder = DistanceManager.this.updateChunkScheduling(pos, p_140881_, chunkholder, i);
             if (chunkholder != null) {
                DistanceManager.this.f_140765_.add(chunkholder);
             }
@@ -381,7 +_,7 @@
    }
 
    class FixedPlayerDistanceChunkTracker extends ChunkTracker {
-      protected final Long2ByteMap f_140886_ = new Long2ByteOpenHashMap();
+      protected final it.unimi.dsi.fastutil.objects.Object2ByteMap<net.minecraft.world.level.ChunkPos> f_140886_ = new it.unimi.dsi.fastutil.objects.Object2ByteOpenHashMap<>();
       protected final int f_140887_;
 
       protected FixedPlayerDistanceChunkTracker(int p_140891_) {
@@ -390,29 +_,29 @@
          this.f_140886_.defaultReturnValue((byte)(p_140891_ + 2));
       }
 
-      protected int m_6172_(long p_140901_) {
-         return this.f_140886_.get(p_140901_);
+      protected int getLevel(net.minecraft.world.level.ChunkPos p_140901_) {
+         return this.f_140886_.getByte(p_140901_);
       }
 
-      protected void m_7351_(long p_140893_, int p_140894_) {
+      protected void setLevel(net.minecraft.world.level.ChunkPos p_140893_, int p_140894_) {
          byte b0;
          if (p_140894_ > this.f_140887_) {
-            b0 = this.f_140886_.remove(p_140893_);
+            b0 = this.f_140886_.removeByte(p_140893_);
          } else {
             b0 = this.f_140886_.put(p_140893_, (byte)p_140894_);
          }
 
-         this.m_8002_(p_140893_, b0, p_140894_);
-      }
-
-      protected void m_8002_(long p_140895_, int p_140896_, int p_140897_) {
-      }
-
-      protected int m_7031_(long p_140899_) {
-         return this.m_140902_(p_140899_) ? 0 : Integer.MAX_VALUE;
-      }
-
-      private boolean m_140902_(long p_140903_) {
+         this.onLevelChange(p_140893_, b0, p_140894_);
+      }
+
+      protected void onLevelChange(net.minecraft.world.level.ChunkPos p_140895_, int p_140896_, int p_140897_) {
+      }
+
+      protected int getLevelFromSource(ChunkPos p_140899_) {
+         return this.havePlayer(p_140899_) ? 0 : Integer.MAX_VALUE;
+      }
+
+      private boolean havePlayer(ChunkPos p_140903_) {
          ObjectSet<ServerPlayer> objectset = DistanceManager.this.f_140760_.get(p_140903_);
          return objectset != null && !objectset.isEmpty();
       }
@@ -423,8 +_,8 @@
 
       private void m_143212_(String p_143213_) {
          try (FileOutputStream fileoutputstream = new FileOutputStream(new File(p_143213_))) {
-            for(Long2ByteMap.Entry entry : this.f_140886_.long2ByteEntrySet()) {
-               ChunkPos chunkpos = new ChunkPos(entry.getLongKey());
+            for(it.unimi.dsi.fastutil.objects.Object2ByteMap.Entry<net.minecraft.world.level.ChunkPos> entry : this.f_140886_.object2ByteEntrySet()) {
+               net.minecraft.world.level.ChunkPos chunkpos = entry.getKey();
                String s = Byte.toString(entry.getByteValue());
                fileoutputstream.write((chunkpos.f_45578_ + "\t" + chunkpos.f_45579_ + "\t" + s + "\n").getBytes(StandardCharsets.UTF_8));
             }
@@ -437,8 +_,8 @@
 
    class PlayerTicketTracker extends DistanceManager.FixedPlayerDistanceChunkTracker {
       private int f_140905_;
-      private final Long2IntMap f_140906_ = Long2IntMaps.synchronize(new Long2IntOpenHashMap());
-      private final LongSet f_140907_ = new LongOpenHashSet();
+      private final it.unimi.dsi.fastutil.objects.Object2IntMap<net.minecraft.world.level.ChunkPos> f_140906_ = it.unimi.dsi.fastutil.objects.Object2IntMaps.synchronize(new it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap<>());
+      private final it.unimi.dsi.fastutil.objects.ObjectSet<net.minecraft.world.level.ChunkPos> f_140907_ = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>();
 
       protected PlayerTicketTracker(int p_140910_) {
          super(p_140910_);
@@ -446,44 +_,45 @@
          this.f_140906_.defaultReturnValue(p_140910_ + 2);
       }
 
-      protected void m_8002_(long p_140915_, int p_140916_, int p_140917_) {
+      protected void onLevelChange(net.minecraft.world.level.ChunkPos p_140915_, int p_140916_, int p_140917_) {
          this.f_140907_.add(p_140915_);
       }
 
       public void m_140912_(int p_140913_) {
-         for(Long2ByteMap.Entry entry : this.f_140886_.long2ByteEntrySet()) {
+         for(it.unimi.dsi.fastutil.objects.Object2ByteMap.Entry<net.minecraft.world.level.ChunkPos> entry : this.f_140886_.object2ByteEntrySet()) {
             byte b0 = entry.getByteValue();
-            long i = entry.getLongKey();
-            this.m_140918_(i, b0, this.m_140932_(b0), b0 <= p_140913_);
+            net.minecraft.world.level.ChunkPos i = entry.getKey();
+            this.onLevelChange(i, b0, this.m_140932_(b0), b0 <= p_140913_ - 2);
          }
 
          this.f_140905_ = p_140913_;
       }
 
-      private void m_140918_(long p_140919_, int p_140920_, boolean p_140921_, boolean p_140922_) {
+      private void onLevelChange(net.minecraft.world.level.ChunkPos p_140919_, int p_140920_, boolean p_140921_, boolean p_140922_) {
+         var chunkPos = p_140919_;
          if (p_140921_ != p_140922_) {
-            Ticket<?> ticket = new Ticket<>(TicketType.f_9444_, DistanceManager.f_140759_, new ChunkPos(p_140919_));
+            Ticket<?> ticket = new Ticket<>(TicketType.f_9444_, DistanceManager.f_140759_, chunkPos);
             if (p_140922_) {
-               DistanceManager.this.f_140767_.m_6937_(ChunkTaskPriorityQueueSorter.m_140624_(() -> {
+               DistanceManager.this.f_140767_.m_6937_(ChunkTaskPriorityQueueSorter.message(() -> {
                   DistanceManager.this.f_140770_.execute(() -> {
-                     if (this.m_140932_(this.m_6172_(p_140919_))) {
-                        DistanceManager.this.m_140784_(p_140919_, ticket);
-                        DistanceManager.this.f_140769_.add(p_140919_);
+                     if (this.m_140932_(this.getLevel(p_140919_))) {
+                        DistanceManager.this.addTicket(chunkPos, ticket);
+                        DistanceManager.this.f_140769_.add(chunkPos);
                      } else {
-                        DistanceManager.this.f_140768_.m_6937_(ChunkTaskPriorityQueueSorter.m_140628_(() -> {
-                        }, p_140919_, false));
+                        DistanceManager.this.f_140768_.m_6937_(ChunkTaskPriorityQueueSorter.release(() -> {
+                        }, chunkPos, false));
                      }
 
                   });
-               }, p_140919_, () -> {
+               }, chunkPos, () -> {
                   return p_140920_;
                }));
             } else {
-               DistanceManager.this.f_140768_.m_6937_(ChunkTaskPriorityQueueSorter.m_140628_(() -> {
+               DistanceManager.this.f_140768_.m_6937_(ChunkTaskPriorityQueueSorter.release(() -> {
                   DistanceManager.this.f_140770_.execute(() -> {
-                     DistanceManager.this.m_140818_(p_140919_, ticket);
+                     DistanceManager.this.removeTicket(chunkPos, ticket);
                   });
-               }, p_140919_, true));
+               }, chunkPos, true));
             }
          }
 
@@ -492,24 +_,24 @@
       public void m_6410_() {
          super.m_6410_();
          if (!this.f_140907_.isEmpty()) {
-            LongIterator longiterator = this.f_140907_.iterator();
+            it.unimi.dsi.fastutil.objects.ObjectIterator<net.minecraft.world.level.ChunkPos> longiterator = this.f_140907_.iterator();
 
             while(longiterator.hasNext()) {
-               long i = longiterator.nextLong();
-               int j = this.f_140906_.get(i);
-               int k = this.m_6172_(i);
+               net.minecraft.world.level.ChunkPos i = longiterator.next();
+               int j = this.f_140906_.getInt(i);
+               int k = this.getLevel(i);
                if (j != k) {
-                  DistanceManager.this.f_140766_.m_6250_(new ChunkPos(i), () -> {
-                     return this.f_140906_.get(i);
+                  DistanceManager.this.f_140766_.m_6250_(i, () -> {
+                     return this.f_140906_.getInt(i);
                   }, k, (p_140928_) -> {
                      if (p_140928_ >= this.f_140906_.defaultReturnValue()) {
-                        this.f_140906_.remove(i);
+                        this.f_140906_.removeInt(i);
                      } else {
                         this.f_140906_.put(i, p_140928_);
                      }
 
                   });
-                  this.m_140918_(i, k, this.m_140932_(j), this.m_140932_(k));
+                  this.onLevelChange(i, k, this.m_140932_(j), this.m_140932_(k));
                }
             }
 
