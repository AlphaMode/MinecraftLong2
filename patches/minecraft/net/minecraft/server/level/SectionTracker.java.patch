--- a/net/minecraft/server/level/SectionTracker.java
+++ b/net/minecraft/server/level/SectionTracker.java
@@ -3,19 +_,24 @@
 import net.minecraft.core.SectionPos;
 import net.minecraft.world.level.lighting.DynamicGraphMinFixedPoint;
 
-public abstract class SectionTracker extends DynamicGraphMinFixedPoint {
+public abstract class SectionTracker extends DynamicGraphMinFixedPoint<SectionPos> {
    protected SectionTracker(int p_8274_, int p_8275_, int p_8276_) {
       super(p_8274_, p_8275_, p_8276_);
    }
 
-   protected void m_7900_(long p_8280_, int p_8281_, boolean p_8282_) {
-      if (!p_8282_ || p_8281_ < this.f_75537_ - 2) {
+   @Override
+   protected SectionPos createPosFromBlockPos(net.minecraft.core.BlockPos blockPos) {
+      return SectionPos.m_123199_(blockPos);
+   }
+
+   protected void checkNeighborsAfterUpdate(SectionPos pPos, int pLevel, boolean pIsDecreasing) {
+      if (!pIsDecreasing || pLevel < this.f_75537_ - 2) {
          for(int i = -1; i <= 1; ++i) {
             for(int j = -1; j <= 1; ++j) {
                for(int k = -1; k <= 1; ++k) {
-                  long l = SectionPos.m_123186_(p_8280_, i, j, k);
-                  if (l != p_8280_) {
-                     this.m_75593_(p_8280_, l, p_8281_, p_8282_);
+                  SectionPos l = pPos.offset(i, j, k);
+                  if (!l.equals(pPos)) {
+                     this.checkNeighbor(pPos, l, pLevel, pIsDecreasing);
                   }
                }
             }
@@ -24,19 +_,19 @@
       }
    }
 
-   protected int m_6357_(long p_8284_, long p_8285_, int p_8286_) {
-      int i = p_8286_;
+   protected int getComputedLevel(SectionPos pPos, SectionPos pExcludedSourcePos, int pLevel) {
+      int i = pLevel;
 
       for(int j = -1; j <= 1; ++j) {
          for(int k = -1; k <= 1; ++k) {
             for(int l = -1; l <= 1; ++l) {
-               long i1 = SectionPos.m_123186_(p_8284_, j, k, l);
-               if (i1 == p_8284_) {
-                  i1 = Long.MAX_VALUE;
+               SectionPos i1 = pPos.offset(j, k, l);
+               if (i1.equals(pPos)) {
+                  i1 = SectionPos.of(Long.MAX_VALUE, Long.MAX_VALUE, Long.MAX_VALUE);
                }
 
-               if (i1 != p_8285_) {
-                  int j1 = this.m_6359_(i1, p_8284_, this.m_6172_(i1));
+               if (!i1.equals(pExcludedSourcePos)) {
+                  int j1 = this.computeLevelFromNeighbor(i1, pPos, this.getLevel(i1));
                   if (i > j1) {
                      i = j1;
                   }
@@ -52,13 +_,13 @@
       return i;
    }
 
-   protected int m_6359_(long p_8293_, long p_8294_, int p_8295_) {
-      return this.m_6163_(p_8293_) ? this.m_7409_(p_8294_) : p_8295_ + 1;
+   protected int computeLevelFromNeighbor(SectionPos pStartPos, SectionPos pEndPos, int pStartLevel) {
+      return pStartPos.m_123251_().equals(net.minecraft.world.level.ChunkPos.f_45577_) ? this.getLevelFromSource(pEndPos) : pStartLevel + 1;
    }
 
-   protected abstract int m_7409_(long p_8287_);
+   protected abstract int getLevelFromSource(net.minecraft.core.SectionPos pPos);
 
-   public void m_8288_(long p_8289_, int p_8290_, boolean p_8291_) {
-      this.m_75576_(Long.MAX_VALUE, p_8289_, p_8290_, p_8291_);
+   public void update(SectionPos pPos, int pLevel, boolean pIsDecreasing) {
+      this.checkEdge(SectionPos.of(net.minecraft.world.level.ChunkPos.f_45577_, java.lang.Long.MAX_VALUE), pPos, pLevel, pIsDecreasing);
    }
 }
