--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -106,15 +_,15 @@
    }
 
    @Nullable
-   public ChunkAccess m_7587_(int p_8360_, int p_8361_, ChunkStatus p_8362_, boolean p_8363_) {
+   public ChunkAccess getChunk(long p_8360_, long p_8361_, ChunkStatus p_8362_, boolean p_8363_) {
       if (Thread.currentThread() != this.f_8330_) {
          return CompletableFuture.supplyAsync(() -> {
-            return this.m_7587_(p_8360_, p_8361_, p_8362_, p_8363_);
+            return this.getChunk(p_8360_, p_8361_, p_8362_, p_8363_);
          }, this.f_8332_).join();
       } else {
          ProfilerFiller profilerfiller = this.f_8329_.m_46473_();
          profilerfiller.m_6174_("getChunk");
-         long i = ChunkPos.m_45589_(p_8360_, p_8361_);
+         long i = ChunkPos.asLong(p_8360_, p_8361_);
 
          for(int j = 0; j < 4; ++j) {
             if (i == this.f_8337_[j] && p_8362_ == this.f_8338_[j]) {
@@ -126,7 +_,7 @@
          }
 
          profilerfiller.m_6174_("getChunkCacheMiss");
-         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.m_8456_(p_8360_, p_8361_, p_8362_, p_8363_);
+         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(p_8360_, p_8361_, p_8362_, p_8363_);
          this.f_8332_.m_18701_(completablefuture::isDone);
          ChunkAccess chunkaccess1 = completablefuture.join().map((p_8406_) -> {
             return p_8406_;
@@ -148,7 +_,7 @@
          return null;
       } else {
          this.f_8329_.m_46473_().m_6174_("getChunkNow");
-         long i = ChunkPos.m_45589_(p_8357_, p_8358_);
+         long i = ChunkPos.asLong(p_8357_, p_8358_);
 
          for(int j = 0; j < 4; ++j) {
             if (i == this.f_8337_[j] && this.f_8338_[j] == ChunkStatus.f_62326_) {
@@ -185,15 +_,15 @@
       Arrays.fill(this.f_8339_, (Object)null);
    }
 
-   public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> m_8431_(int p_8432_, int p_8433_, ChunkStatus p_8434_, boolean p_8435_) {
+   public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFuture(long p_8432_, long p_8433_, ChunkStatus p_8434_, boolean p_8435_) {
       boolean flag = Thread.currentThread() == this.f_8330_;
       CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture;
       if (flag) {
-         completablefuture = this.m_8456_(p_8432_, p_8433_, p_8434_, p_8435_);
+         completablefuture = this.getChunkFutureMainThread(p_8432_, p_8433_, p_8434_, p_8435_);
          this.f_8332_.m_18701_(completablefuture::isDone);
       } else {
          completablefuture = CompletableFuture.supplyAsync(() -> {
-            return this.m_8456_(p_8432_, p_8433_, p_8434_, p_8435_);
+            return this.getChunkFutureMainThread(p_8432_, p_8433_, p_8434_, p_8435_);
          }, this.f_8332_).thenCompose((p_8413_) -> {
             return p_8413_;
          });
@@ -202,7 +_,7 @@
       return completablefuture;
    }
 
-   private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> m_8456_(int p_8457_, int p_8458_, ChunkStatus p_8459_, boolean p_8460_) {
+   private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFutureMainThread(long p_8457_, long p_8458_, ChunkStatus p_8459_, boolean p_8460_) {
       ChunkPos chunkpos = new ChunkPos(p_8457_, p_8458_);
       long i = chunkpos.m_45588_();
       int j = 33 + ChunkStatus.m_62370_(p_8459_);
@@ -228,14 +_,14 @@
       return p_8417_ == null || p_8417_.m_140093_() > p_8418_;
    }
 
-   public boolean m_5563_(int p_8429_, int p_8430_) {
+   public boolean hasChunk(long p_8429_, long p_8430_) {
       ChunkHolder chunkholder = this.m_8364_((new ChunkPos(p_8429_, p_8430_)).m_45588_());
       int i = 33 + ChunkStatus.m_62370_(ChunkStatus.f_62326_);
       return !this.m_8416_(chunkholder, i);
    }
 
    public BlockGetter m_6196_(int p_8454_, int p_8455_) {
-      long i = ChunkPos.m_45589_(p_8454_, p_8455_);
+      long i = ChunkPos.asLong(p_8454_, p_8455_);
       ChunkHolder chunkholder = this.m_8364_(i);
       if (chunkholder == null) {
          return null;
@@ -406,9 +_,9 @@
    }
 
    public void m_8450_(BlockPos p_8451_) {
-      int i = SectionPos.m_123171_(p_8451_.m_123341_());
-      int j = SectionPos.m_123171_(p_8451_.m_123343_());
-      ChunkHolder chunkholder = this.m_8364_(ChunkPos.m_45589_(i, j));
+      int i = SectionPos.m_235865_(p_8451_.getX());
+      int j = SectionPos.m_235865_(p_8451_.getZ());
+      ChunkHolder chunkholder = this.m_8364_(ChunkPos.asLong(i, j));
       if (chunkholder != null) {
          chunkholder.m_140056_(p_8451_);
       }
@@ -419,7 +_,7 @@
       this.f_8332_.execute(() -> {
          ChunkHolder chunkholder = this.m_8364_(p_8404_.m_123251_().m_45588_());
          if (chunkholder != null) {
-            chunkholder.m_140036_(p_8403_, p_8404_.m_123206_());
+            chunkholder.sectionLightChanged(p_8403_, p_8404_.y());
          }
 
       });
