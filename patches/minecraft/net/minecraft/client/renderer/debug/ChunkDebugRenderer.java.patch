--- a/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
+++ b/net/minecraft/client/renderer/debug/ChunkDebugRenderer.java
@@ -33,13 +_,13 @@
       this.f_113363_ = p_113368_;
    }
 
-   public void m_7790_(PoseStack p_113370_, MultiBufferSource p_113371_, double p_113372_, double p_113373_, double p_113374_) {
+   public void render(PoseStack pPoseStack, MultiBufferSource pBuffer, me.alphamode.mclong.math.BigDecimal pCamX, me.alphamode.mclong.math.BigDecimal pCamY, me.alphamode.mclong.math.BigDecimal pCamZ) {
       double d0 = (double)Util.m_137569_();
       if (d0 - this.f_113364_ > 3.0E9D) {
          this.f_113364_ = d0;
          IntegratedServer integratedserver = this.f_113363_.m_91092_();
          if (integratedserver != null) {
-            this.f_113366_ = new ChunkDebugRenderer.ChunkData(integratedserver, p_113372_, p_113374_);
+            this.f_113366_ = new ChunkDebugRenderer.ChunkData(integratedserver, pCamX, pCamZ);
          } else {
             this.f_113366_ = null;
          }
@@ -47,7 +_,7 @@
 
       if (this.f_113366_ != null) {
          Map<ChunkPos, String> map = this.f_113366_.f_113379_.getNow((Map<ChunkPos, String>)null);
-         double d1 = this.f_113363_.f_91063_.m_109153_().m_90583_().f_82480_ * 0.85D;
+         me.alphamode.mclong.math.BigDecimal d1 = this.f_113363_.f_91063_.m_109153_().m_90583_().getY().multiply(0.85D);
 
          for(Map.Entry<ChunkPos, String> entry : this.f_113366_.f_113378_.entrySet()) {
             ChunkPos chunkpos = entry.getKey();
@@ -60,7 +_,7 @@
             int i = 0;
 
             for(String s1 : astring) {
-               DebugRenderer.m_269439_(p_113370_, p_113371_, s1, (double)SectionPos.m_175554_(chunkpos.f_45578_, 8), d1 + (double)i, (double)SectionPos.m_175554_(chunkpos.f_45579_, 8), -1, 0.15F, true, 0.0F, true);
+               DebugRenderer.renderFloatingText(pPoseStack, pBuffer, s1, SectionPos.sectionToBlockCoord(chunkpos.getX(), 8).toBigDecimal(), d1.add((double)i), SectionPos.sectionToBlockCoord(chunkpos.getZ(), 8).toBigDecimal(), -1, 0.15F, true, 0.0F, true);
                i -= 2;
             }
          }
@@ -73,19 +_,19 @@
       final Map<ChunkPos, String> f_113378_;
       final CompletableFuture<Map<ChunkPos, String>> f_113379_;
 
-      ChunkData(IntegratedServer p_113382_, double p_113383_, double p_113384_) {
+      ChunkData(IntegratedServer pIntegratedServer, me.alphamode.mclong.math.BigDecimal pX, me.alphamode.mclong.math.BigDecimal pZ) {
          ClientLevel clientlevel = ChunkDebugRenderer.this.f_113363_.f_91073_;
          ResourceKey<Level> resourcekey = clientlevel.m_46472_();
-         int i = SectionPos.m_175552_(p_113383_);
-         int j = SectionPos.m_175552_(p_113384_);
+         me.alphamode.mclong.math.BigInteger i = SectionPos.posToSectionCoord(pX);
+         me.alphamode.mclong.math.BigInteger j = SectionPos.posToSectionCoord(pZ);
          ImmutableMap.Builder<ChunkPos, String> builder = ImmutableMap.builder();
          ClientChunkCache clientchunkcache = clientlevel.m_7726_();
 
-         for(int k = i - 12; k <= i + 12; ++k) {
-            for(int l = j - 12; l <= j + 12; ++l) {
+         for(me.alphamode.mclong.math.BigInteger k = i.subtract(me.alphamode.mclong.core.BigConstants.Ints.TWELVE); k.compareTo(i.add(me.alphamode.mclong.core.BigConstants.Ints.TWELVE)) <= 0; k = k.add()) {
+            for(me.alphamode.mclong.math.BigInteger l = j.subtract(me.alphamode.mclong.core.BigConstants.Ints.TWELVE); l.compareTo(j.add(me.alphamode.mclong.core.BigConstants.Ints.TWELVE)) <= 0; l = l.add()) {
                ChunkPos chunkpos = new ChunkPos(k, l);
                String s = "";
-               LevelChunk levelchunk = clientchunkcache.m_62227_(k, l, false);
+               LevelChunk levelchunk = clientchunkcache.getChunk(k, l, false);
                s = s + "Client: ";
                if (levelchunk == null) {
                   s = s + "0n/a\n";
@@ -99,16 +_,16 @@
          }
 
          this.f_113378_ = builder.build();
-         this.f_113379_ = p_113382_.m_18691_(() -> {
-            ServerLevel serverlevel = p_113382_.m_129880_(resourcekey);
+         this.f_113379_ = pIntegratedServer.m_18691_(() -> {
+            ServerLevel serverlevel = pIntegratedServer.m_129880_(resourcekey);
             if (serverlevel == null) {
                return ImmutableMap.of();
             } else {
                ImmutableMap.Builder<ChunkPos, String> builder1 = ImmutableMap.builder();
                ServerChunkCache serverchunkcache = serverlevel.m_7726_();
 
-               for(int i1 = i - 12; i1 <= i + 12; ++i1) {
-                  for(int j1 = j - 12; j1 <= j + 12; ++j1) {
+               for(me.alphamode.mclong.math.BigInteger i1 = i.subtract(me.alphamode.mclong.core.BigConstants.Ints.TWELVE); i1.compareTo(i.add(me.alphamode.mclong.core.BigConstants.Ints.TWELVE)) <= 0; i1 = i1.add()) {
+                  for(me.alphamode.mclong.math.BigInteger j1 = j.subtract(me.alphamode.mclong.core.BigConstants.Ints.TWELVE); j1.compareTo(j.add(me.alphamode.mclong.core.BigConstants.Ints.TWELVE)) <= 0; j1 = j1.add()) {
                      ChunkPos chunkpos1 = new ChunkPos(i1, j1);
                      builder1.put(chunkpos1, "Server: " + serverchunkcache.m_8448_(chunkpos1));
                   }
